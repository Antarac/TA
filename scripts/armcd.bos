#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, wheels, turret, lsleeve, lbarrel, lflare, rsleeve, rbarrel,
       rflare;

static-var  restore_delay, unitviewer, gun_1;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Create()
{
	unitviewer = FALSE;
	gun_1 = base;
	restore_delay = 2000;
	start-script SmokeUnit();
}

StartMoving()
{
	spin wheels around x-axis speed <150.032967>;
}

StopMoving()
{
	stop-spin wheels around x-axis;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn rsleeve to x-axis <0.000000> speed <30.000000>;
	turn lsleeve to x-axis <0.000000> speed <30.000000>;
	wait-for-turn turret around x-axis;
	turn turret to y-axis <0.000000> speed <40.000000>;
	wait-for-turn turret around y-axis;
	sleep 150;
}

Demo()
{
	unitviewer = TRUE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <90.000000>;
	turn rsleeve to x-axis <0.000000> - pitch speed <50.000000>;
	turn lsleeve to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn rsleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move rbarrel to z-axis [-2.000000] speed [500.000000];
		wait-for-move rbarrel along z-axis;
		move rbarrel to z-axis [0.000000] speed [3.000000];
	}
	if( gun_1 == 1 )
	{
		move lbarrel to z-axis [-2.000000] speed [500.000000];
		wait-for-move lbarrel along z-axis;
		move lbarrel to z-axis [0.000000] speed [3.000000];
	}
	gun_1 = !gun_1;
}

AimFromPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = rflare;
	}
	if( gun_1 == 1 )
	{
		piecenum = lflare;
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = rflare;
	}
	if( gun_1 == 1 )
	{
		piecenum = lflare;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD | BITMAP1;
		explode wheels type NOHEATCLOUD | BITMAP1;
		explode turret type NOHEATCLOUD | BITMAP1;
		explode lsleeve type NOHEATCLOUD | BITMAP1;
		explode lbarrel type NOHEATCLOUD | BITMAP1;
		explode lflare type NOHEATCLOUD | BITMAP1;
		explode rsleeve type NOHEATCLOUD | BITMAP1;
		explode rbarrel type NOHEATCLOUD | BITMAP1;
		explode rflare type NOHEATCLOUD | BITMAP1;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD | SHATTER | BITMAP4;
		explode wheels type NOHEATCLOUD | SHATTER | BITMAP4;
		explode turret type NOHEATCLOUD | SHATTER | BITMAP4;
		explode lsleeve type NOHEATCLOUD | SHATTER | BITMAP4;
		explode lbarrel type NOHEATCLOUD | SHATTER | BITMAP4;
		explode lflare type NOHEATCLOUD | SHATTER | BITMAP4;
		explode rsleeve type NOHEATCLOUD | SHATTER | BITMAP4;
		explode rbarrel type NOHEATCLOUD | SHATTER | BITMAP4;
		explode rflare type NOHEATCLOUD | SHATTER | BITMAP4;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wheels type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lsleeve type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lbarrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lflare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rsleeve type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rbarrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rflare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wheels type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lsleeve type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lbarrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lflare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rsleeve type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rbarrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rflare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	return (corpsetype);
}
