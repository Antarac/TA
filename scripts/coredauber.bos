#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  groundplate, torso, shoulder, forearm, gun, barrel1, flare1, barrel2,
       flare2, thigh1, leg1, foot1, thigh2, leg2, foot2;

static-var  bMoving, bAiming, gun_1, Static_Var_4;

// Signal definitions
#define SIG_AIM				2


walk()
{
	if( TRUE )
	{
		move thigh1 to z-axis [0.000000] now;
		move thigh2 to z-axis [0.000000] now;
		move torso to x-axis [0.000000] now;
		move torso to y-axis [-0.100000] now;
		move shoulder to x-axis [0.000000] now;
		move foot2 to z-axis [0.000000] now;
		move foot1 to x-axis [0.000000] now;
		move foot1 to z-axis [0.000000] now;
		turn thigh1 to x-axis <16.895604> now;
		turn thigh2 to x-axis <-45.697802> now;
		turn torso to x-axis <1.796703> now;
		turn torso to z-axis <-0.697802> now;
		turn shoulder to x-axis <-6.296703> now;
		turn forearm to x-axis <-15.796703> now;
		turn leg2 to x-axis <51.000000> now;
		turn foot1 to x-axis <-16.500000> now;
		sleep 100;
	}
	if( TRUE )
	{
		move torso to y-axis [0.000000] now;
		turn thigh1 to x-axis <24.296703> now;
		turn thigh2 to x-axis <-41.098901> now;
		turn torso to x-axis <0.395604> now;
		turn torso to z-axis <-0.395604> now;
		turn shoulder to x-axis <-13.000000> now;
		turn forearm to x-axis <-22.895604> now;
		turn leg2 to x-axis <43.197802> now;
		turn foot1 to x-axis <-12.000000> now;
		sleep 102;
	}
	if( TRUE )
	{
		turn thigh1 to x-axis <37.598901> now;
		turn thigh2 to x-axis <-26.395604> now;
		turn torso to x-axis <0.000000> now;
		turn torso to z-axis <0.000000> now;
		turn shoulder to x-axis <-19.296703> now;
		turn forearm to x-axis <-21.500000> now;
		turn leg2 to x-axis <26.395604> now;
		turn leg1 to x-axis <8.395604> now;
		sleep 104;
	}
	if( TRUE )
	{
		move torso to y-axis [-0.300000] now;
		turn thigh1 to x-axis <22.098901> now;
		turn thigh2 to x-axis <-12.000000> now;
		turn torso to x-axis <0.000000> now;
		turn shoulder to x-axis <-17.895604> now;
		turn forearm to x-axis <-5.296703> now;
		turn leg2 to x-axis <11.598901> now;
		turn leg1 to x-axis <27.395604> now;
		sleep 102;
	}
	if( TRUE )
	{
		move torso to y-axis [-0.300000] now;
		turn thigh1 to x-axis <3.197802> now;
		turn thigh2 to x-axis <7.000000> now;
		turn torso to x-axis <1.796703> now;
		turn torso to z-axis <1.395604> now;
		turn shoulder to x-axis <-5.296703> now;
		turn forearm to x-axis <0.000000> now;
		turn leg2 to x-axis <-1.098901> now;
		turn foot2 to x-axis <-6.296703> now;
		turn leg1 to x-axis <53.500000> now;
		sleep 102;
	}
	if( TRUE )
	{
		move torso to y-axis [-0.100000] now;
		turn thigh1 to x-axis <-20.697802> now;
		turn thigh2 to x-axis <20.697802> now;
		turn torso to x-axis <2.500000> now;
		turn torso to z-axis <0.697802> now;
		turn shoulder to x-axis <2.500000> now;
		turn foot2 to x-axis <-19.697802> now;
		turn leg1 to x-axis <60.796703> now;
		sleep 103;
	}
	if( TRUE )
	{
		move torso to y-axis [-0.100000] now;
		turn thigh1 to x-axis <-39.395604> now;
		turn thigh2 to x-axis <28.500000> now;
		turn torso to x-axis <0.697802> now;
		turn shoulder to x-axis <1.395604> now;
		turn foot2 to x-axis <-27.098901> now;
		sleep 103;
	}
	if( TRUE )
	{
		move torso to y-axis [0.000000] now;
		turn thigh1 to x-axis <-44.000000> now;
		turn thigh2 to x-axis <34.796703> now;
		turn torso to x-axis <0.395604> now;
		turn torso to z-axis <0.395604> now;
		turn shoulder to x-axis <1.098901> now;
		turn foot2 to x-axis <-20.395604> now;
		turn leg1 to x-axis <44.000000> now;
		turn foot1 to x-axis <0.000000> now;
		sleep 103;
	}
	if( TRUE )
	{
		turn thigh1 to x-axis <-32.000000> now;
		turn thigh2 to x-axis <35.895604> now;
		turn torso to x-axis <0.000000> now;
		turn torso to z-axis <0.000000> now;
		turn shoulder to x-axis <0.000000> now;
		turn leg2 to x-axis <16.197802> now;
		turn foot2 to x-axis <-13.697802> now;
		turn leg1 to x-axis <32.395604> now;
		sleep 103;
	}
	if( TRUE )
	{
		move torso to y-axis [-0.300000] now;
		turn thigh1 to x-axis <-23.598901> now;
		turn thigh2 to x-axis <23.598901> now;
		turn leg2 to x-axis <40.395604> now;
		turn leg1 to x-axis <24.296703> now;
		sleep 103;
	}
	if( TRUE )
	{
		move torso to y-axis [-0.200000] now;
		turn thigh1 to x-axis <-1.395604> now;
		turn thigh2 to x-axis <-14.395604> now;
		turn torso to x-axis <2.098901> now;
		turn torso to z-axis <-2.098901> now;
		turn shoulder to x-axis <-0.697802> now;
		turn leg2 to x-axis <69.296703> now;
		turn leg1 to x-axis <2.500000> now;
		sleep 103;
	}
	move torso to y-axis [-0.100000] now;
	turn thigh1 to x-axis <11.598901> now;
	turn thigh2 to x-axis <-35.197802> now;
	turn torso to z-axis <-1.098901> now;
	turn shoulder to x-axis <-2.500000> now;
	turn forearm to x-axis <-4.197802> now;
	turn leg2 to x-axis <76.697802> now;
	turn foot1 to x-axis <-14.098901> now;
	sleep 103;
}

walklegs()
{
	if( TRUE )
	{
		turn thigh1 to x-axis <16.895604> now;
		turn thigh2 to x-axis <-45.697802> now;
		turn leg2 to x-axis <51.000000> now;
		turn foot1 to x-axis <-16.500000> now;
		sleep 100;
	}
	if( TRUE )
	{
		turn thigh1 to x-axis <24.296703> now;
		turn thigh2 to x-axis <-41.098901> now;
		turn leg2 to x-axis <43.197802> now;
		turn foot1 to x-axis <-12.000000> now;
		sleep 100;
	}
	if( TRUE )
	{
		turn thigh1 to x-axis <37.598901> now;
		turn thigh2 to x-axis <-26.395604> now;
		turn leg2 to x-axis <26.395604> now;
		turn leg1 to x-axis <8.395604> now;
		sleep 100;
	}
	if( TRUE )
	{
		turn thigh1 to x-axis <22.098901> now;
		turn thigh2 to x-axis <-12.000000> now;
		turn leg2 to x-axis <11.598901> now;
		turn leg1 to x-axis <27.395604> now;
		sleep 100;
	}
	if( TRUE )
	{
		turn thigh1 to x-axis <3.197802> now;
		turn thigh2 to x-axis <7.000000> now;
		turn leg2 to x-axis <-1.098901> now;
		turn foot2 to x-axis <-6.296703> now;
		turn leg1 to x-axis <53.500000> now;
		sleep 100;
	}
	if( TRUE )
	{
		turn thigh1 to x-axis <-20.697802> now;
		turn thigh2 to x-axis <20.697802> now;
		turn foot2 to x-axis <-19.697802> now;
		turn leg1 to x-axis <60.796703> now;
		sleep 100;
	}
	if( TRUE )
	{
		turn thigh1 to x-axis <-39.395604> now;
		turn thigh2 to x-axis <28.500000> now;
		turn foot2 to x-axis <-27.098901> now;
		sleep 100;
	}
	if( TRUE )
	{
		turn thigh1 to x-axis <-44.000000> now;
		turn thigh2 to x-axis <34.796703> now;
		turn foot2 to x-axis <-20.395604> now;
		turn leg1 to x-axis <44.000000> now;
		turn foot1 to x-axis <0.000000> now;
		sleep 100;
	}
	if( TRUE )
	{
		turn thigh1 to x-axis <-32.000000> now;
		turn thigh2 to x-axis <35.895604> now;
		turn leg2 to x-axis <16.197802> now;
		turn foot2 to x-axis <-13.697802> now;
		turn leg1 to x-axis <32.395604> now;
		sleep 100;
	}
	if( TRUE )
	{
		turn thigh1 to x-axis <-23.598901> now;
		turn thigh2 to x-axis <23.598901> now;
		turn leg2 to x-axis <40.395604> now;
		turn leg1 to x-axis <24.296703> now;
		sleep 100;
	}
	if( TRUE )
	{
		turn thigh1 to x-axis <-1.395604> now;
		turn thigh2 to x-axis <-14.395604> now;
		turn leg2 to x-axis <69.296703> now;
		turn leg1 to x-axis <2.500000> now;
		sleep 100;
	}
	turn thigh1 to x-axis <11.598901> now;
	turn thigh2 to x-axis <-35.197802> now;
	turn leg2 to x-axis <76.697802> now;
	turn foot1 to x-axis <-14.098901> now;
	sleep 100;
}

stand()
{
	move thigh1 to z-axis [0.000000] now;
	move thigh2 to z-axis [0.000000] now;
	move torso to x-axis [0.000000] now;
	move shoulder to x-axis [0.000000] now;
	move forearm to y-axis [0.000000] now;
	move forearm to z-axis [0.000000] now;
	move foot2 to z-axis [0.000000] now;
	move foot1 to x-axis [0.000000] now;
	move foot1 to z-axis [0.000000] now;
	sleep 200;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			if( aiming )
			{
				Static_Var_4 = 1;
				call-script walklegs();
			}
			if( !aiming )
			{
				Static_Var_4 = 0;
				call-script walk();
			}
			justmoved = TRUE;
		}
		if( !moving )
		{
			Static_Var_4 = 1;
			if( justmoved )
			{
				call-script stand();
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_4 = 1;
	hide flare1;
	gun_1 = groundplate;
	hide flare2;
	dont-cache flare1;
	dont-cache flare2;
	start-script MotionControl();
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 4000;
	turn torso to y-axis <0.000000> speed <90.000000>;
	turn gun to x-axis <0.000000> speed <40.000000>;
	bAiming = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = groundplate;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	while( !Static_Var_4 )
	{
		sleep 100;
	}
	turn torso to y-axis heading speed <100.000000>;
	turn gun to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn torso around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		show flare1;
		move barrel1 to z-axis [-2.400000] speed [500.000000];
		sleep 150;
		hide flare1;
		wait-for-move barrel1 along z-axis;
		move barrel1 to z-axis [0.000000] speed [3.000000];
		sleep 300;
	}
	if( gun_1 == 1 )
	{
		show flare2;
		move barrel2 to z-axis [-2.400000] speed [500.000000];
		sleep 150;
		hide flare2;
		wait-for-move barrel2 along z-axis;
		move barrel2 to z-axis [0.000000] speed [3.000000];
		sleep 300;
	}
	gun_1 = !gun_1;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode groundplate type BITMAPONLY | BITMAP1;
		explode torso type BITMAPONLY | BITMAP1;
		explode shoulder type BITMAPONLY | BITMAP1;
		explode forearm type BITMAPONLY | BITMAP1;
		explode gun type BITMAPONLY | BITMAP1;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode flare1 type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP1;
		explode flare2 type BITMAPONLY | BITMAP1;
		explode thigh1 type BITMAPONLY | BITMAP1;
		explode leg1 type BITMAPONLY | BITMAP1;
		explode foot1 type BITMAPONLY | BITMAP1;
		explode thigh2 type BITMAPONLY | BITMAP1;
		explode leg2 type BITMAPONLY | BITMAP1;
		explode foot2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode groundplate type SHATTER | BITMAP4;
		explode torso type SHATTER | BITMAP4;
		explode shoulder type SHATTER | BITMAP4;
		explode forearm type SHATTER | BITMAP4;
		explode gun type SHATTER | BITMAP4;
		explode barrel1 type SHATTER | BITMAP4;
		explode flare1 type SHATTER | BITMAP4;
		explode barrel2 type SHATTER | BITMAP4;
		explode flare2 type SHATTER | BITMAP4;
		explode thigh1 type SHATTER | BITMAP4;
		explode leg1 type SHATTER | BITMAP4;
		explode foot1 type SHATTER | BITMAP4;
		explode thigh2 type SHATTER | BITMAP4;
		explode leg2 type SHATTER | BITMAP4;
		explode foot2 type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode groundplate type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode torso type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode shoulder type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode forearm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode thigh1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode foot1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode thigh2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode foot2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode groundplate type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode torso type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode shoulder type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode forearm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode thigh1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode foot1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode thigh2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode foot2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
