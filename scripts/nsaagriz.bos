#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, torso, point, blaster, gun, caisson, caisson1, caisson2,
       radarpole, radar1, radar2, roue1, roue2, roue3, roue4, roue5,
       roue6, roue7, roue8, bearing, corp, cannon;

static-var  restore_delay, Static_Var_12, Static_Var_13, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.000000>;
	turn base to z-axis anglez speed <50.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.000000>;
	turn base to x-axis anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

Go()
{
	Static_Var_13 = 2;
	turn caisson1 to z-axis <-70.016484> speed <30.000000>;
	turn caisson2 to z-axis <70.016484> speed <30.000000>;
	turn caisson to x-axis <-70.016484> speed <45.000000>;
	wait-for-turn caisson around x-axis;
	set ARMORED to 0;
	move blaster to y-axis [10.000000] speed [10.000000];
	move bearing to y-axis [10.000000] speed [10.000000];
	sleep 1000;
	move radarpole to y-axis [8.000000] speed [15.000000];
	sleep 800;
	move radar1 to y-axis [5.000000] speed [15.000000];
	move radar2 to y-axis [5.000000] speed [15.000000];
	sleep 800;
	turn radar1 to z-axis <-90.021978> speed <30.000000>;
	turn radar2 to z-axis <90.021978> speed <30.000000>;
	sleep 800;
	spin radarpole around y-axis speed <15.000000>;
	set BUSY to 1;
	set BUSY to 0;
}

Stop()
{
	Static_Var_13 = 1;
	set BUSY to 1;
	turn blaster to y-axis <0.000000> speed <30.000000>;
	stop-spin radarpole around y-axis;
	wait-for-turn blaster around y-axis;
	turn radar1 to z-axis <0.000000> speed <30.000000>;
	turn radar2 to z-axis <0.000000> speed <30.000000>;
	wait-for-turn radar1 around z-axis;
	move radar1 to y-axis [0.000000] speed [15.000000];
	move radar2 to y-axis [0.000000] speed [15.000000];
	sleep 800;
	move radarpole to y-axis [0.000000] speed [15.000000];
	move blaster to y-axis [0.000000] speed [10.000000];
	move bearing to y-axis [0.000000] speed [10.000000];
	sleep 2000;
	turn caisson1 to z-axis <0.000000> speed <35.000000>;
	turn caisson2 to z-axis <0.000000> speed <35.000000>;
	turn caisson to x-axis <0.000000> speed <35.000000>;
	sleep 800;
	set ARMORED to 1;
	set BUSY to 0;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

Create()
{
	set ARMORED to 1;
	call-script InitState();
	Static_Var_13 = 1;
	restore_delay = 10000;
	start-script SmokeUnit();
}

StartMoving()
{
	spin roue1 around x-axis speed <9.000000>;
	spin roue2 around x-axis speed <9.000000>;
	spin roue3 around x-axis speed <9.000000>;
	spin roue4 around x-axis speed <9.000000>;
	spin roue5 around x-axis speed <9.000000>;
	spin roue6 around x-axis speed <9.000000>;
	spin roue7 around x-axis speed <9.000000>;
	spin roue8 around x-axis speed <9.000000>;
}

StopMoving()
{
	stop-spin roue1 around x-axis;
	stop-spin roue2 around x-axis;
	stop-spin roue3 around x-axis;
	stop-spin roue4 around x-axis;
	stop-spin roue5 around x-axis;
	stop-spin roue6 around x-axis;
	stop-spin roue7 around x-axis;
	stop-spin roue8 around x-axis;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	if( Static_Var_13 == 1 )
	{
		wait-for-turn blaster around y-axis;
		sleep restore_delay;
	}
	if( Static_Var_12 == 2 )
	{
		wait-for-turn blaster around y-axis;
		sleep restore_delay;
		turn blaster to y-axis <0.000000> speed <200.000000>;
	}
}

AimPrimary(heading, pitch)
{
	if( Static_Var_13 == 2 )
	{
		signal SIG_AIM;
		set-signal-mask SIG_AIM;
		turn blaster to y-axis heading speed <290.000000>;
		wait-for-turn blaster around y-axis;
		start-script RestoreAfterDelay();
		return (1);
	}
}

FirePrimary()
{
	if( Static_Var_13 == 2 )
	{
		emit-sfx 1024 + 0 from point;
		move gun to z-axis [-1.000000] now;
		sleep 170;
		move gun to z-axis [0.000000] speed [100.000000];
		return (1);
	}
}

AimFromPrimary(piecenum)
{
	if( Static_Var_13 == 2 )
	{
		piecenum = gun;
	}
}

QueryPrimary(piecenum)
{
	if( Static_Var_13 == 2 )
	{
		piecenum = point;
	}
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode blaster type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode corp type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode caisson1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode caisson2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode cannon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode blaster type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode corp type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode caisson1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode caisson2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode cannon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode blaster type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode corp type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode caisson1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode caisson2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode cannon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode blaster type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode corp type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode caisson1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode caisson2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode cannon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
