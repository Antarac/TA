#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, rwing, lwing, wake1, wake2, nano, body;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_MOVE			2


activatescr()
{
	if( TRUE )
	{
		move lwing to x-axis [0.000000] now;
		move lwing to x-axis [-2.500000] speed [5.000000];
		move rwing to x-axis [0.000000] now;
		move rwing to x-axis [2.500000] speed [5.000000];
		sleep 996;
	}
	sleep 6;
}

deactivatescr()
{
	if( TRUE )
	{
		move lwing to x-axis [-2.500000] now;
		move lwing to x-axis [0.000000] speed [6.000000];
		move rwing to x-axis [2.500000] now;
		move rwing to x-axis [0.000000] speed [6.000000];
		sleep 823;
	}
	sleep 7;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 == 3 )
		{
			emit-sfx 256 | 3 from body;
			emit-sfx 256 | 3 from lwing;
			emit-sfx 256 | 3 from rwing;
			emit-sfx 256 | 3 from wake1;
			emit-sfx 256 | 3 from wake2;
		}
		sleep 150;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

StartBuilding()
{
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	set INBUILDSTANCE to 0;
}

QueryNanoPiece(piecenum)
{
	piecenum = nano;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode lwing type BITMAPONLY | BITMAP2;
		explode rwing type BITMAPONLY | BITMAP3;
		explode wake1 type BITMAPONLY | BITMAP1;
		explode wake2 type BITMAPONLY | BITMAP2;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode lwing type BITMAPONLY | BITMAP2;
		explode rwing type BITMAPONLY | BITMAP3;
		explode body type SHATTER | BITMAP4;
		explode wake1 type FALL | BITMAP1;
		explode wake2 type FALL | BITMAP2;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode lwing type BITMAPONLY | BITMAP2;
		explode rwing type BITMAPONLY | BITMAP3;
		explode body type SHATTER | BITMAP4;
		explode wake1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode wake2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode rwing type BITMAPONLY | BITMAP2;
	explode lwing type BITMAPONLY | BITMAP3;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode wake1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode wake2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	return (corpsetype);
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
}
