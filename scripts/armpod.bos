#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, leg1, leg2, leg3, leg4, turret, canon1, canon2,
       barrel1, barrel2, radar, shell1, shell2, flare1, flare2;

static-var  bMoving, gun_1, restore_delay;

// Signal definitions
#define SIG_AIM				2


walk()
{
	while( bMoving )
	{
		if( bMoving )
		{
			turn leg1 to y-axis <53.010989> speed <40.000000>;
			turn leg1 to y-axis <0.000000> speed <40.000000>;
			turn leg1 to z-axis <0.000000> speed <40.000000>;
			turn leg1 to z-axis <0.000000> speed <40.000000>;
			turn leg2 to z-axis <0.000000> speed <40.000000>;
			turn leg2 to z-axis <51.010989> speed <40.000000>;
			turn leg3 to y-axis <-60.010989> speed <40.000000>;
			turn leg3 to y-axis <-60.010989> speed <40.000000>;
			turn leg3 to z-axis <-51.010989> speed <40.000000>;
			turn leg3 to z-axis <0.000000> speed <40.000000>;
			turn leg4 to y-axis <-57.010989> speed <40.000000>;
			turn leg4 to y-axis <0.000000> speed <40.000000>;
			turn leg4 to z-axis <0.000000> speed <40.000000>;
			turn leg4 to z-axis <0.000000> speed <40.000000>;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to z-axis <51.010989> speed <40.000000>;
			turn leg2 to y-axis <54.010989> speed <40.000000>;
			turn leg2 to z-axis <51.010989> speed <40.000000>;
			turn leg3 to y-axis <0.000000> speed <40.000000>;
			turn leg3 to z-axis <0.000000> speed <40.000000>;
			turn leg4 to y-axis <0.000000> speed <40.000000>;
			turn leg4 to z-axis <-51.010989> speed <40.000000>;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <75.016484> speed <40.000000>;
			turn leg1 to z-axis <51.010989> speed <40.000000>;
			turn leg2 to y-axis <54.010989> speed <40.000000>;
			turn leg2 to z-axis <0.000000> speed <40.000000>;
			turn leg3 to y-axis <0.000000> speed <40.000000>;
			turn leg3 to z-axis <-51.010989> speed <40.000000>;
			turn leg4 to y-axis <-51.010989> speed <40.000000>;
			turn leg4 to z-axis <-51.010989> speed <40.000000>;
			sleep 200;
		}
		turn leg1 to y-axis <63.010989> speed <40.000000>;
		turn leg1 to z-axis <0.000000> speed <40.000000>;
		turn leg2 to y-axis <0.000000> speed <40.000000>;
		turn leg2 to z-axis <0.000000> speed <40.000000>;
		turn leg3 to y-axis <-60.010989> speed <40.000000>;
		turn leg3 to z-axis <-51.010989> speed <40.000000>;
		turn leg4 to y-axis <-57.010989> speed <40.000000>;
		turn leg4 to z-axis <0.000000> speed <40.000000>;
		sleep 200;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walk();
		}
		if( !Func_Var_1 )
		{
			sleep 100;
			turn leg1 to y-axis <0.000000> speed <100.000000>;
			turn leg1 to z-axis <0.000000> speed <100.000000>;
			turn leg2 to y-axis <0.000000> speed <100.000000>;
			turn leg2 to z-axis <0.000000> speed <100.000000>;
			turn leg3 to y-axis <0.000000> speed <100.000000>;
			turn leg3 to z-axis <0.000000> speed <100.000000>;
			turn leg4 to y-axis <0.000000> speed <100.000000>;
			turn leg4 to z-axis <0.000000> speed <100.000000>;
		}
	}
}

Create()
{
	hide flare1;
	hide flare2;
	bMoving = FALSE;
	gun_1 = base;
	restore_delay = 3000;
	spin radar around y-axis speed <50.010989>;
	start-script SmokeUnit();
	start-script MotionControl();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <35.000000>;
	turn canon1 to x-axis <0.000000> speed <15.000000>;
	turn canon2 to x-axis <0.000000> speed <15.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <50.000000>;
	turn canon1 to x-axis <0.000000> - pitch speed <25.000000>;
	turn canon2 to x-axis <0.000000> - pitch speed <25.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn canon1 around x-axis;
	wait-for-turn canon2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move barrel1 to z-axis [-2.000000] now;
		show flare1;
		explode shell1 type NOHEATCLOUD | FALL;
		sleep 150;
		hide flare1;
		wait-for-move barrel1 along z-axis;
		move barrel1 to z-axis [0.000000] speed [3.000000];
	}
	if( gun_1 == 1 )
	{
		move barrel2 to z-axis [-2.000000] now;
		show flare2;
		explode shell2 type NOHEATCLOUD | FALL;
		sleep 150;
		hide flare2;
		wait-for-move barrel2 along z-axis;
		move barrel2 to z-axis [0.000000] speed [3.000000];
	}
	gun_1 = !gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD | BITMAPONLY | BITMAP1;
		explode leg1 type NOHEATCLOUD | BITMAPONLY | BITMAP2;
		explode leg2 type NOHEATCLOUD | BITMAPONLY | BITMAP3;
		explode leg3 type NOHEATCLOUD | BITMAPONLY | BITMAP4;
		explode leg4 type NOHEATCLOUD | BITMAPONLY | BITMAP5;
		explode turret type NOHEATCLOUD | BITMAPONLY | BITMAP1;
		explode canon1 type NOHEATCLOUD | BITMAPONLY | BITMAP2;
		explode canon2 type NOHEATCLOUD | BITMAPONLY | BITMAP3;
		explode barrel1 type NOHEATCLOUD | BITMAPONLY | BITMAP4;
		explode barrel2 type NOHEATCLOUD | BITMAPONLY | BITMAP5;
		explode radar type NOHEATCLOUD | BITMAPONLY | BITMAP1;
		explode shell1 type NOHEATCLOUD | BITMAPONLY | BITMAP2;
		explode shell2 type NOHEATCLOUD | BITMAPONLY | BITMAP3;
		explode flare1 type NOHEATCLOUD | BITMAPONLY | BITMAP4;
		explode flare2 type NOHEATCLOUD | BITMAPONLY | BITMAP5;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD | BITMAPONLY | BITMAP1;
		explode leg1 type NOHEATCLOUD | FALL | BITMAP2;
		explode leg2 type NOHEATCLOUD | FALL | BITMAP3;
		explode leg3 type NOHEATCLOUD | FALL | BITMAP4;
		explode leg4 type NOHEATCLOUD | FALL | BITMAP5;
		explode turret type NOHEATCLOUD | SHATTER | BITMAP1;
		explode canon1 type NOHEATCLOUD | SHATTER | BITMAP2;
		explode canon2 type NOHEATCLOUD | SHATTER | BITMAP3;
		explode barrel1 type NOHEATCLOUD | FALL | BITMAP4;
		explode barrel2 type NOHEATCLOUD | FALL | BITMAP5;
		explode radar type NOHEATCLOUD | SHATTER | BITMAP1;
		explode shell1 type NOHEATCLOUD | FALL | BITMAP2;
		explode shell2 type NOHEATCLOUD | FALL | BITMAP3;
		explode flare1 type NOHEATCLOUD | FALL | BITMAP4;
		explode flare2 type NOHEATCLOUD | FALL | BITMAP5;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD | BITMAPONLY | BITMAP1;
		explode leg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode leg3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leg4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode turret type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode canon1 type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode canon2 type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode barrel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode radar type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode shell1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode shell2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flare1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD | BITMAPONLY | BITMAP1;
	explode leg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode leg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode leg3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode leg4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode turret type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode canon1 type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode canon2 type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode barrel2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode radar type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode shell1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode shell2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flare1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (corpsetype);
}
