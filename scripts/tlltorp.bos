#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece base, body, flare, turret;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Tangue()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn base to x-axis rockAng speed rockSpeed*5;
			turn base to z-axis rockAng speed rockSpeed*5;
			wait-for-turn base around x-axis;
			wait-for-turn base around z-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}

Create()
{
	dont-cache turret;
	dont-shade turret;
	start-script Tangue();
	start-script SmokeUnit();

}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <80.000000>;
	wait-for-turn turret around y-axis;
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode flare type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode turret type BITMAPONLY | BITMAP1;
		explode flare type BITMAPONLY | BITMAP2;
		explode body type SHATTER | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode turret type BITMAPONLY | BITMAP1;
		explode flare type BITMAPONLY | BITMAP2;
		explode body type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode turret type BITMAPONLY | BITMAP1;
	explode flare type BITMAPONLY | BITMAP2;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP3;
}
