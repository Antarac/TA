#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1a, flare1b, flare2a, flare2b, flare3a, flare3b, turret, blades,
       tailblades, base;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, statechg_DesiredState,
            statechg_StateChanging;

// Signal definitions
#define SIG_AIM_3			2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver3.0 beta2 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.netzine.ml.org/DCS   
}

Go()
{
	if( TRUE )
	{
		spin blades around y-axis speed <777.071429>;
		spin tailblades around x-axis speed <777.071429>;
		sleep 25;
	}
}

Stop()
{
	if( TRUE )
	{
		sleep 1500;
		stop-spin blades around y-axis decelerate <2.000000>;
		stop-spin tailblades around x-axis decelerate <2.000000>;
		sleep 25;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide flare1a;
	hide flare1b;
	hide flare2a;
	hide flare2b;
	hide flare3a;
	hide flare3b;
	Static_Var_4 = 3000;
	Static_Var_1 = 1;
	Static_Var_2 = 1;
	Static_Var_3 = 1;
	start-script SmokeUnit();
	call-script InitState();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

RestoreAfterDelay()
{
	sleep Static_Var_4;
	turn turret to y-axis <0.000000> speed <90.021978>;
	turn turret to x-axis <0.000000> speed <50.010989>;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turret to y-axis heading speed <300.071429>;
	turn turret to x-axis <0.000000> - pitch speed <300.071429>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show flare1a;
	sleep 150;
	hide flare1a;
}

FireSecondary()
{
	show flare2a;
	sleep 150;
	hide flare2a;
}

FireTertiary()
{
	show flare3a;
	sleep 150;
	hide flare3a;
}

AimFromTertiary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare1a;
}

QuerySecondary(piecenum)
{
	piecenum = flare2a;
}

QueryTertiary(piecenum)
{
	piecenum = flare3a;
}
