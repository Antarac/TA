#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, lift, con2, con1, maker, shell2, shell1, con3,
       con4;

static-var  Static_Var_2 ;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	if( TRUE )
	{
		turn shell1 to z-axis <-90.000000> speed <50.000000>;
		turn shell2 to z-axis <90.000000> speed <50.000000>;
		move lift to y-axis [1.888428] speed [1.110840];
		wait-for-move lift along y-axis;
	}
	if( TRUE )
	{
		move con1 to x-axis [0.610962] speed [0.555420];
		move con2 to x-axis [0.610962] speed [0.555420];
		move con3 to x-axis [-0.610962] speed [0.555420];
		move con4 to x-axis [-0.610962] speed [0.555420];
		move con1 to z-axis [-0.610962] speed [0.555420];
		move con2 to z-axis [0.610962] speed [0.555420];
		move con3 to z-axis [0.610962] speed [0.555420];
		move con4 to z-axis [-0.610962] speed [0.555420];
		wait-for-move con1 along x-axis;
	}
}

Stop()
{
	if( TRUE )
	{
		move con1 to x-axis [0.000000] speed [0.555420];
		move con2 to x-axis [0.000000] speed [0.555420];
		move con3 to x-axis [0.000000] speed [0.555420];
		move con4 to x-axis [0.000000] speed [0.555420];
		move con1 to z-axis [0.000000] speed [0.555420];
		move con2 to z-axis [0.000000] speed [0.555420];
		move con3 to z-axis [0.000000] speed [0.555420];
		move con4 to z-axis [0.000000] speed [0.555420];
		wait-for-move con1 along x-axis;
	}
	if( TRUE )
	{
		turn shell1 to z-axis <0.000000> speed <50.000000>;
		turn shell2 to z-axis <0.000000> speed <50.000000>;
		move lift to y-axis [0.000000] speed [1.110840];
		wait-for-move lift along y-axis;
	}
}

ImAMetalMaker()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 150;
	}
	Static_Var_2 = -1;
	while( TRUE )
	{
		if( get UNKNOWN_UNIT_VALUE(1024) == 1 )
		{
			if( Static_Var_2 != 1 )
			{
				call-script Go();
				Static_Var_2 = 1;
			}
		}
		else if( Static_Var_2 != 0 )
		{
			call-script Stop();
			Static_Var_2 = 0;
		}
		sleep 1000;
	}
}

Create()
{
	call-script ImAMetalMaker();
	start-script SmokeUnit();
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
}
