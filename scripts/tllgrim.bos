#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pods, lthigh, lleg, lfoot, rthigh, rleg, rfoot,
       axe, torso, pivot, lshould, luparm, lgun, lbarrel1, lbarrel2,
       lflare1, lflare2, pomp, rshould, ruparm, rarm, rhand, lrpod,
       p1, p2, p3, p4, shell, bassin;

static-var  Static_Var_1, gun_1, gun_2, bMoving, bAiming,
            Static_Var_6, restore_delay, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4


walk()
{
	if( TRUE )
	{
		turn axe to y-axis <-10.000000> speed <40.000000>;
		move axe to y-axis [1.000000] speed [25.000000];
		turn axe to x-axis <15.000000> speed <40.000000>;
		turn bassin to y-axis <10.000000> speed <30.000000>;
		turn rshould to x-axis <50.005495> speed <125.000000>;
		turn rarm to x-axis <-45.005495> speed <100.000000>;
		turn rhand to x-axis <-45.005495> speed <100.000000>;
		turn rthigh to x-axis <-30.005495> speed <180.000000>;
		turn rleg to x-axis <20.000000> speed <55.000000>;
		turn rfoot to x-axis <25.005495> speed <100.000000>;
		turn lshould to x-axis <-30.005495> speed <95.000000>;
		turn lgun to x-axis <-30.005495> speed <95.000000>;
		turn lthigh to x-axis <15.005495> speed <110.000000>;
		turn lleg to x-axis <30.005495> speed <100.000000>;
		move lleg to y-axis [1.000000] speed [25.000000];
		turn lfoot to x-axis <-25.005495> speed <100.000000>;
		sleep 300;
	}
	if( TRUE )
	{
		turn rshould to x-axis <0.000000> speed <60.000000>;
		turn rarm to x-axis <0.000000> speed <100.000000>;
		turn rhand to x-axis <0.000000> speed <100.000000>;
		sleep 100;
	}
	if( TRUE )
	{
		turn axe to y-axis <0.000000> speed <40.000000>;
		move axe to y-axis [0.000000] speed [25.000000];
		turn axe to x-axis <0.000000> speed <40.000000>;
		turn bassin to y-axis <0.000000> speed <30.000000>;
		move rleg to y-axis [-1.000000] speed [25.000000];
		turn rleg to x-axis <45.005495> speed <250.000000>;
		turn lthigh to x-axis <0.000000> speed <30.000000>;
		turn lleg to x-axis <0.000000> speed <45.000000>;
		move lleg to y-axis [0.000000] speed [25.000000];
		turn lfoot to x-axis <0.000000> speed <100.000000>;
		sleep 200;
	}
	if( TRUE )
	{
		turn rthigh to x-axis <0.000000> speed <100.000000>;
		turn rfoot to x-axis <0.000000> speed <100.000000>;
		move lleg to y-axis [0.000000] speed [10.000000];
		sleep 60;
	}
	if( TRUE )
	{
		turn lshould to x-axis <50.005495> speed <95.000000>;
		turn lgun to x-axis <0.000000> speed <95.000000>;
		sleep 100;
		sleep 100;
	}
	if( TRUE )
	{
		turn rshould to x-axis <-30.005495> speed <95.000000>;
		turn rarm to x-axis <-45.005495> speed <100.000000>;
		turn rhand to x-axis <-45.005495> speed <100.000000>;
		sleep 40;
	}
	if( TRUE )
	{
		turn axe to y-axis <10.000000> speed <40.000000>;
		move axe to y-axis [1.000000] speed [20.000000];
		turn axe to x-axis <15.000000> speed <40.000000>;
		turn bassin to y-axis <-10.000000> speed <30.000000>;
		turn rthigh to x-axis <15.005495> speed <110.000000>;
		turn rleg to x-axis <30.005495> speed <200.000000>;
		move rleg to y-axis [1.000000] speed [25.000000];
		turn rfoot to x-axis <-45.005495> speed <100.000000>;
		turn lshould to x-axis <50.005495> speed <125.000000>;
		turn lthigh to x-axis <-30.005495> speed <180.000000>;
		turn lleg to x-axis <20.000000> speed <55.000000>;
		turn lfoot to x-axis <25.005495> speed <100.000000>;
		sleep 300;
	}
	if( TRUE )
	{
		turn lshould to x-axis <0.000000> speed <60.000000>;
		turn lgun to x-axis <0.000000> speed <95.000000>;
		sleep 200;
	}
	if( TRUE )
	{
		turn rthigh to x-axis <0.000000> speed <30.000000>;
		turn rleg to x-axis <0.000000> speed <45.000000>;
		turn rfoot to x-axis <0.000000> speed <100.000000>;
		move lleg to y-axis [-1.000000] speed [25.000000];
		turn lleg to x-axis <45.005495> speed <250.000000>;
		sleep 46;
	}
	if( TRUE )
	{
		move rleg to y-axis [0.000000] speed [10.000000];
		move axe to y-axis [0.000000] speed [25.000000];
		turn axe to x-axis <0.000000> speed <40.000000>;
		sleep 17;
	}
	if( TRUE )
	{
		turn rshould to x-axis <0.000000> speed <60.000000>;
		turn rarm to x-axis <0.000000> speed <100.000000>;
		turn rhand to x-axis <0.000000> speed <100.000000>;
		sleep 97;
	}
	if( TRUE )
	{
		turn rshould to x-axis <50.005495> speed <95.000000>;
		sleep 100;
	}
	if( TRUE )
	{
		turn axe to y-axis <0.000000> speed <40.000000>;
		turn bassin to y-axis <0.000000> speed <30.000000>;
		turn rshould to x-axis <0.000000> speed <95.000000>;
		turn rarm to x-axis <0.000000> speed <100.000000>;
		turn rhand to x-axis <0.000000> speed <100.000000>;
		move lleg to y-axis [0.000000] speed [10.000000];
		turn lleg to x-axis <0.000000> speed <125.000000>;
		turn lthigh to x-axis <0.000000> speed <200.000000>;
		turn lfoot to x-axis <0.000000> speed <100.000000>;
		sleep 300;
	}
}

walklegs()
{
	if( TRUE )
	{
		turn axe to y-axis <-10.000000> speed <40.000000>;
		move axe to y-axis [1.000000] speed [25.000000];
		turn axe to x-axis <15.000000> speed <40.000000>;
		turn bassin to y-axis <10.000000> speed <30.000000>;
		turn rthigh to x-axis <-30.005495> speed <180.000000>;
		turn rleg to x-axis <20.000000> speed <55.000000>;
		turn rfoot to x-axis <25.005495> speed <100.000000>;
		turn lthigh to x-axis <15.005495> speed <110.000000>;
		turn lleg to x-axis <30.005495> speed <100.000000>;
		move lleg to y-axis [1.000000] speed [25.000000];
		turn lfoot to x-axis <-25.005495> speed <100.000000>;
		sleep 300;
	}
	if( TRUE )
	{
		sleep 100;
	}
	if( TRUE )
	{
		turn axe to y-axis <0.000000> speed <40.000000>;
		move axe to y-axis [0.000000] speed [25.000000];
		turn axe to x-axis <0.000000> speed <40.000000>;
		turn bassin to y-axis <0.000000> speed <30.000000>;
		move rleg to y-axis [-1.000000] speed [25.000000];
		turn rleg to x-axis <45.005495> speed <250.000000>;
		turn lthigh to x-axis <0.000000> speed <30.000000>;
		turn lleg to x-axis <0.000000> speed <45.000000>;
		move lleg to y-axis [0.000000] speed [25.000000];
		turn lfoot to x-axis <0.000000> speed <100.000000>;
		sleep 200;
	}
	if( TRUE )
	{
		turn rthigh to x-axis <0.000000> speed <100.000000>;
		turn rfoot to x-axis <0.000000> speed <100.000000>;
		move lleg to y-axis [0.000000] speed [10.000000];
		sleep 60;
	}
	if( TRUE )
	{
		sleep 100;
		sleep 100;
	}
	if( TRUE )
	{
		sleep 40;
	}
	if( TRUE )
	{
		turn axe to y-axis <10.000000> speed <40.000000>;
		move axe to y-axis [1.000000] speed [25.000000];
		turn axe to x-axis <15.000000> speed <40.000000>;
		turn bassin to y-axis <-10.000000> speed <30.000000>;
		turn rthigh to x-axis <150.005495> speed <110.000000>;
		turn rleg to x-axis <30.005495> speed <200.000000>;
		move rleg to y-axis [1.000000] speed [25.000000];
		turn rfoot to x-axis <-45.005495> speed <100.000000>;
		turn lthigh to x-axis <-30.005495> speed <180.000000>;
		turn lleg to x-axis <20.000000> speed <55.000000>;
		turn lfoot to x-axis <25.005495> speed <100.000000>;
		sleep 300;
	}
	if( TRUE )
	{
		sleep 200;
	}
	if( TRUE )
	{
		turn rthigh to x-axis <0.000000> speed <30.000000>;
		turn rleg to x-axis <0.000000> speed <45.000000>;
		turn rfoot to x-axis <0.000000> speed <100.000000>;
		move lleg to y-axis [-1.000000] speed [25.000000];
		turn lleg to x-axis <45.005495> speed <250.000000>;
		sleep 46;
	}
	if( TRUE )
	{
		move rleg to y-axis [0.000000] speed [10.000000];
		move axe to y-axis [0.000000] speed [25.000000];
		turn axe to x-axis <0.000000> speed <40.000000>;
		sleep 17;
	}
	if( TRUE )
	{
		sleep 97;
	}
	if( TRUE )
	{
		sleep 100;
	}
	if( TRUE )
	{
		turn axe to y-axis <0.000000> speed <40.000000>;
		turn bassin to y-axis <0.000000> speed <30.000000>;
		move lleg to y-axis [0.000000] speed [10.000000];
		turn lleg to x-axis <0.000000> speed <125.000000>;
		turn lthigh to x-axis <0.000000> speed <200.000000>;
		turn lfoot to x-axis <0.000000> speed <100.000000>;
		sleep 300;
	}
}

ready()
{
	turn pivot to x-axis <-90.016484> speed <150.000000>;
	turn rshould to x-axis <15.000000> speed <100.000000>;
	wait-for-turn pivot around x-axis;
	turn ruparm to z-axis <-20.000000> speed <80.000000>;
	turn rarm to z-axis <-35.005495> speed <80.000000>;
	turn rhand to y-axis <90.016484> speed <150.000000>;
	turn rhand to x-axis <-60.005495> speed <200.000000>;
	turn luparm to z-axis <20.000000> speed <75.000000>;
	turn lgun to z-axis <-20.000000> speed <75.000000>;
	wait-for-turn rhand around y-axis;
}

holster()
{
	turn rshould to x-axis <0.000000> speed <100.000000>;
	turn ruparm to z-axis <0.000000> speed <80.000000>;
	turn rarm to z-axis <0.000000> speed <80.000000>;
	turn rhand to y-axis <0.000000> speed <150.000000>;
	turn rhand to x-axis <0.000000> speed <200.000000>;
	turn luparm to z-axis <0.000000> speed <75.000000>;
	turn lgun to z-axis <0.000000> speed <75.000000>;
	turn pivot to x-axis <0.000000> speed <200.000000>;
	wait-for-turn pivot around x-axis;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	call-script ready();
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	call-script holster();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			if( aiming )
			{
				Static_Var_6 = 1;
				call-script walklegs();
			}
			if( !aiming )
			{
				Static_Var_6 = 0;
				call-script walk();
			}
			justmoved = TRUE;
		}
		if( !moving )
		{
			Static_Var_6 = 1;
			if( justmoved )
			{
				turn rleg to x-axis <0.000000> speed <75.000000>;
				turn rthigh to x-axis <0.000000> speed <75.000000>;
				turn rfoot to x-axis <0.000000> speed <100.000000>;
				turn lleg to x-axis <0.000000> speed <75.000000>;
				turn lthigh to x-axis <0.000000> speed <75.000000>;
				turn lfoot to x-axis <0.000000> speed <100.000000>;
				turn bassin to y-axis <0.000000> speed <15.000000>;
				turn rshould to x-axis <0.000000> speed <100.000000>;
				turn ruparm to x-axis <0.000000> speed <80.000000>;
				turn rarm to x-axis <0.000000> speed <80.000000>;
				turn rhand to x-axis <0.000000> speed <200.000000>;
				turn luparm to x-axis <0.000000> speed <75.000000>;
				turn lgun to x-axis <0.000000> speed <75.000000>;
				if( !aiming )
				{
					turn rshould to x-axis <0.000000> speed <100.000000>;
					turn ruparm to x-axis <0.000000> speed <80.000000>;
					turn rarm to x-axis <0.000000> speed <80.000000>;
					turn rhand to x-axis <0.000000> speed <200.000000>;
					turn luparm to x-axis <0.000000> speed <75.000000>;
					turn lgun to x-axis <0.000000> speed <75.000000>;
				}
				justmoved = FALSE;
			}
			sleep 200;
		}
	}
}

Create()
{
	turn lflare1 to x-axis <90.000000> now;
	turn lflare2 to x-axis <90.000000> now;
	hide p1;
	hide p2;
	hide p3;
	hide p4;
	hide base;
	hide lflare1;
	hide lflare2;
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_6 = 1;
	gun_1 = pods;
	gun_2 = pods;
	Static_Var_1 = 0;
	restore_delay = 2000;
	call-script InitState();
	start-script MotionControl();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
	turn torso to y-axis <0.000000> speed <200.000000>;
	wait-for-turn torso around y-axis;
	bAiming = FALSE;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn torso to y-axis heading speed <150.000000>;
	wait-for-turn torso around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	bAiming = TRUE;
	return (1);
}

FirePrimary()
{
	if( gun_1 == 1 )
	{
		explode shell type FALL | EXPLODE_ON_HIT;
		emit-sfx 1024 + 0 from lflare1;
		sleep 100;
		turn rarm to z-axis <-80.016484> speed <200.000000>;
		turn axe to y-axis <10.000000> speed <120.000000>;
		turn lshould to x-axis <-30.005495> speed <100.000000>;
		turn luparm to x-axis <-10.000000> speed <100.000000>;
		turn lgun to x-axis <-45.005495> speed <300.000000>;
		move lbarrel1 to y-axis [3.000000] speed [400.000000];
		turn rhand to x-axis <-90.016484> speed <200.000000>;
		turn pomp to y-axis <-75.016484> speed <250.000000>;
		sleep 350;
		turn pomp to y-axis <0.000000> speed <120.000000>;
		move lbarrel1 to y-axis [0.000000] speed [15.000000];
		turn lshould to x-axis <0.000000> speed <60.000000>;
		turn luparm to x-axis <0.000000> speed <60.000000>;
		turn lgun to x-axis <0.000000> speed <100.000000>;
		turn rarm to z-axis <-35.005495> speed <175.000000>;
		turn rhand to x-axis <-30.005495> speed <200.000000>;
		turn axe to y-axis <0.000000> speed <50.000000>;
	}
	if( gun_1 == 2 )
	{
		explode shell type FALL | EXPLODE_ON_HIT;
		emit-sfx 1024 + 0 from lflare2;
		turn rarm to z-axis <-80.016484> speed <200.000000>;
		turn axe to y-axis <10.000000> speed <120.000000>;
		turn lshould to x-axis <-30.005495> speed <100.000000>;
		turn luparm to x-axis <-10.000000> speed <100.000000>;
		turn lgun to x-axis <-45.005495> speed <300.000000>;
		move lbarrel1 to y-axis [3.000000] speed [400.000000];
		turn rhand to x-axis <-90.016484> speed <200.000000>;
		turn pomp to y-axis <-75.016484> speed <250.000000>;
		sleep 350;
		turn pomp to y-axis <0.000000> speed <120.000000>;
		move lbarrel1 to y-axis [0.000000] speed [15.000000];
		turn lshould to x-axis <0.000000> speed <60.000000>;
		turn luparm to x-axis <0.000000> speed <60.000000>;
		turn lgun to x-axis <0.000000> speed <100.000000>;
		turn rarm to z-axis <-35.005495> speed <175.000000>;
		turn rhand to x-axis <-30.005495> speed <200.000000>;
		turn axe to y-axis <0.000000> speed <50.000000>;
	}
	++gun_1;
	if( gun_1 == 3 )
	{
		gun_1 = pods;
	}
}

FireSecondary()
{
	if( gun_2 == 1 )
	{
		sleep 100;
	}
	if( gun_2 == 2 )
	{
		sleep 100;
	}
	if( gun_2 == 3 )
	{
		sleep 100;
	}
	if( gun_2 == 4 )
	{
		sleep 100;
	}
	++gun_2;
	if( gun_2 == 5 )
	{
		gun_2 = pods;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

AimFromSecondary(piecenum)
{
	piecenum = lrpod;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = lflare1;
	}
	if( gun_1 == 2 )
	{
		piecenum = lflare2;
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 == 1 )
	{
		piecenum = p1;
	}
	if( gun_2 == 2 )
	{
		piecenum = p2;
	}
	if( gun_2 == 3 )
	{
		piecenum = p3;
	}
	if( gun_2 == 4 )
	{
		piecenum = p4;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = torso;
}

QueryTertiary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = lflare1;
	}
	if( gun_1 == 2 )
	{
		piecenum = lflare2;
	}
}

FireTertiary()
{
}

AimTertiary(heading, pitch)
{
	while( !bAiming )
	{
		sleep 200;
	}
	return (1);
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

Killed(severity, corpsetype)
{
	hide lflare1;
	hide lflare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode bassin type BITMAPONLY | BITMAP2;
		explode lthigh type BITMAPONLY | BITMAP3;
		explode lleg type BITMAPONLY | BITMAP4;
		explode lfoot type BITMAPONLY | BITMAP5;
		explode rthigh type BITMAPONLY | BITMAP1;
		explode rleg type BITMAPONLY | BITMAP2;
		explode rfoot type BITMAPONLY | BITMAP3;
		explode torso type BITMAPONLY | BITMAP4;
		explode rshould type BITMAPONLY | BITMAP1;
		explode ruparm type BITMAPONLY | BITMAP2;
		explode rarm type BITMAPONLY | BITMAP3;
		explode rhand type BITMAPONLY | BITMAP4;
		explode lshould type BITMAPONLY | BITMAP5;
		explode luparm type BITMAPONLY | BITMAP1;
		explode lgun type BITMAPONLY | BITMAP2;
		explode shell type BITMAPONLY | BITMAP3;
		explode lrpod type BITMAPONLY | BITMAP4;
		explode pods type BITMAPONLY | BITMAP5;
		explode axe type BITMAPONLY | BITMAP1;
		explode pivot type BITMAPONLY | BITMAP2;
		explode lflare1 type BITMAPONLY | BITMAP3;
		explode lflare2 type BITMAPONLY | BITMAP4;
		explode pomp type BITMAPONLY | BITMAP5;
		explode p1 type BITMAPONLY | BITMAP1;
		explode p2 type BITMAPONLY | BITMAP2;
		explode p3 type BITMAPONLY | BITMAP3;
		explode p4 type BITMAPONLY | BITMAP4;
		explode shell type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode bassin type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lthigh type SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rthigh type SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode torso type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rshould type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode ruparm type SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rarm type SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lshould type SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lgun type SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode shell type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lrpod type SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode pods type BITMAPONLY | BITMAP5;
		explode axe type BITMAPONLY | BITMAP1;
		explode pivot type BITMAPONLY | BITMAP2;
		explode lflare1 type BITMAPONLY | BITMAP3;
		explode lflare2 type BITMAPONLY | BITMAP4;
		explode pomp type BITMAPONLY | BITMAP5;
		explode p1 type BITMAPONLY | BITMAP1;
		explode p2 type BITMAPONLY | BITMAP2;
		explode p3 type BITMAPONLY | BITMAP3;
		explode p4 type BITMAPONLY | BITMAP4;
		explode shell type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode lthigh type SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rthigh type SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode torso type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode bassin type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rshould type SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rhand type SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lshould type SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lgun type SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode shell type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lrpod type SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode pods type BITMAPONLY | BITMAP5;
		explode axe type BITMAPONLY | BITMAP1;
		explode pivot type BITMAPONLY | BITMAP2;
		explode lflare1 type BITMAPONLY | BITMAP3;
		explode lflare2 type BITMAPONLY | BITMAP4;
		explode pomp type BITMAPONLY | BITMAP5;
		explode p1 type BITMAPONLY | BITMAP1;
		explode p2 type BITMAPONLY | BITMAP2;
		explode p3 type BITMAPONLY | BITMAP3;
		explode p4 type BITMAPONLY | BITMAP4;
		explode shell type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode lthigh type SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rthigh type SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode torso type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode bassin type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rshould type SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rhand type SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lshould type SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lgun type SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode shell type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lrpod type SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode pods type BITMAPONLY | BITMAP5;
	explode axe type BITMAPONLY | BITMAP1;
	explode pivot type BITMAPONLY | BITMAP2;
	explode lflare1 type BITMAPONLY | BITMAP3;
	explode lflare2 type BITMAPONLY | BITMAP4;
	explode pomp type BITMAPONLY | BITMAP5;
	explode p1 type BITMAPONLY | BITMAP1;
	explode p2 type BITMAPONLY | BITMAP2;
	explode p3 type BITMAPONLY | BITMAP3;
	explode p4 type BITMAPONLY | BITMAP4;
	explode shell type BITMAPONLY | BITMAP5;
}
