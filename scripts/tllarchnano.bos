#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, nano1, nano2, spray1, spray2, legl1,
       legl2, legl3, legl4, legr1, legr2, legr3, legr4;

static-var  Static_Var_1, spray, Static_Var_3, Static_Var_4, Static_Var_5,
            bMoving, Static_Var_7;

// Signal definitions
#define SIG_ACTIVATE			2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(anglex, anglez)
{
	var Func_Var_3;
	Func_Var_3 = get HEALTH;
	if( Func_Var_3 <= 50 )
	{
		if( Static_Var_3 == 0 )
		{
			Static_Var_3 = 1;
			hide legl2;
			explode legl2 type FALL | SMOKE | BITMAP2;
		}
	}
	if( Func_Var_3 <= 30 )
	{
		if( Static_Var_4 == 0 )
		{
			Static_Var_4 = 1;
			hide legr3;
			explode legr3 type FALL | SMOKE | BITMAP2;
		}
	}
	if( Func_Var_3 <= 15 )
	{
		if( Static_Var_5 == 0 )
		{
			Static_Var_5 = 1;
			hide legr1;
			explode legr1 type FALL | SMOKE | BITMAP2;
		}
	}
}

walk()
{
	while( bMoving )
	{
		if( bMoving )
		{
			turn legr4 to y-axis <43.774725> now;
			turn legr4 to y-axis <0.000000> speed <218.956044>;
			turn legr4 to z-axis <0.598901> now;
			turn legr4 to z-axis <0.000000> speed <3.027473>;
			turn legr3 to z-axis <0.000000> now;
			turn legr3 to z-axis <31.000000> speed <155.098901>;
			turn legr2 to y-axis <43.774725> now;
			turn legr2 to y-axis <0.000000> speed <218.956044>;
			turn legr2 to z-axis <0.598901> now;
			turn legr2 to z-axis <0.000000> speed <3.027473>;
			turn legr1 to y-axis <34.659341> now;
			turn legr1 to y-axis <34.049451> speed <3.027473>;
			turn legr1 to z-axis <31.609890> now;
			turn legr1 to z-axis <0.598901> speed <155.098901>;
			turn legl4 to y-axis <-40.126374> now;
			turn legl4 to y-axis <-40.126374> speed <0.000000>;
			turn legl4 to z-axis <-31.000000> now;
			turn legl4 to z-axis <-0.598901> speed <152.054945>;
			turn legl3 to y-axis <-37.076923> now;
			turn legl3 to y-axis <0.000000> speed <185.505495>;
			turn legl3 to z-axis <0.000000> now;
			turn legl3 to z-axis <0.000000> speed <0.000000>;
			turn legl2 to y-axis <-40.126374> now;
			turn legl2 to y-axis <-40.126374> speed <0.000000>;
			turn legl2 to z-axis <-31.000000> now;
			turn legl2 to z-axis <-0.598901> speed <152.054945>;
			turn legl1 to y-axis <0.000000> now;
			turn legl1 to y-axis <-30.395604> speed <152.054945>;
			turn legl1 to z-axis <-45.000000> now;
			sleep 200;
		}
		if( bMoving )
		{
			turn legr4 to z-axis <31.609890> speed <158.137363>;
			turn legr3 to y-axis <34.659341> speed <173.346154>;
			turn legr3 to z-axis <31.000000> speed <0.000000>;
			turn legr2 to z-axis <31.609890> speed <158.137363>;
			turn legr1 to y-axis <0.000000> speed <170.296703>;
			turn legr1 to z-axis <0.000000> speed <3.027473>;
			turn legl4 to y-axis <0.000000> speed <200.708791>;
			turn legl3 to z-axis <-31.000000> speed <155.098901>;
			turn legl2 to y-axis <0.000000> speed <200.708791>;
			turn legl1 to z-axis <2.417582> speed <237.208791>;
			sleep 200;
		}
		if( bMoving )
		{
			turn legr4 to y-axis <55.939560> speed <279.785714>;
			turn legr4 to z-axis <31.000000> speed <3.027473>;
			turn legr3 to y-axis <34.659341> speed <0.000000>;
			turn legr3 to z-axis <0.598901> speed <152.054945>;
			turn legr2 to y-axis <55.939560> speed <279.785714>;
			turn legr2 to z-axis <31.000000> speed <3.027473>;
			turn legr1 to z-axis <31.609890> speed <158.137363>;
			turn legl4 to y-axis <-0.598901> speed <3.027473>;
			turn legl4 to z-axis <-31.000000> speed <152.054945>;
			turn legl3 to y-axis <-31.609890> speed <158.137363>;
			turn legl3 to z-axis <-31.000000> speed <0.000000>;
			turn legl2 to y-axis <-0.598901> speed <3.027473>;
			turn legl2 to z-axis <-31.000000> speed <152.054945>;
			turn legl1 to y-axis <3.027473> speed <167.258242>;
			sleep 200;
		}
		turn legr4 to y-axis <43.774725> speed <60.818681>;
		turn legr4 to z-axis <0.598901> speed <152.054945>;
		turn legr3 to y-axis <0.000000> speed <173.346154>;
		turn legr3 to z-axis <0.000000> speed <3.027473>;
		turn legr2 to y-axis <43.774725> speed <60.818681>;
		turn legr2 to z-axis <0.598901> speed <152.054945>;
		turn legr1 to y-axis <34.659341> speed <173.346154>;
		turn legr1 to z-axis <31.609890> speed <0.000000>;
		turn legl4 to y-axis <-40.126374> speed <197.675824>;
		turn legl4 to z-axis <-31.000000> speed <0.000000>;
		turn legl3 to y-axis <-37.076923> speed <27.357143>;
		turn legl3 to z-axis <0.000000> speed <155.098901>;
		turn legl2 to y-axis <-40.126374> speed <197.675824>;
		turn legl2 to z-axis <-31.000000> speed <0.000000>;
		turn legl1 to y-axis <0.000000> speed <15.197802>;
		turn legl1 to z-axis <-45.000000> speed <237.208791>;
		sleep 200;
	}
	turn legr1 to y-axis <0.000000> speed <60.000000>;
	turn legr1 to z-axis <0.000000> speed <60.000000>;
	turn legr2 to y-axis <0.000000> speed <60.000000>;
	turn legr2 to z-axis <0.000000> speed <60.000000>;
	turn legr3 to y-axis <0.000000> speed <60.000000>;
	turn legr3 to z-axis <0.000000> speed <60.000000>;
	turn legr4 to y-axis <0.000000> speed <60.000000>;
	turn legr4 to z-axis <0.000000> speed <60.000000>;
	turn legl1 to y-axis <0.000000> speed <60.000000>;
	turn legl1 to z-axis <0.000000> speed <60.000000>;
	turn legl2 to y-axis <0.000000> speed <60.000000>;
	turn legl2 to z-axis <0.000000> speed <60.000000>;
	turn legl3 to y-axis <0.000000> speed <60.000000>;
	turn legl3 to z-axis <0.000000> speed <60.000000>;
	turn legl4 to y-axis <0.000000> speed <60.000000>;
	turn legl4 to z-axis <0.000000> speed <60.000000>;
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walk();
		}
		if( !Func_Var_1 )
		{
			sleep 100;
		}
	}
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_3 = 0;
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	spray = base;
	bMoving = FALSE;
	start-script MotionControl();
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

setSFXoccupy(state)
{
	Static_Var_7 = state;
}

Activate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	move nano1 to y-axis [2.500000] speed [8.000000];
	move nano2 to y-axis [2.500000] speed [8.000000];
	wait-for-move nano1 along y-axis;
	move nano1 to x-axis [1.000000] speed [8.000000];
	move nano2 to x-axis [-1.000000] speed [8.000000];
	wait-for-move nano1 along x-axis;
	turn turret to y-axis Static_Var_1 speed <160.000000>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.000000> speed <160.000000>;
	wait-for-turn turret around y-axis;
	move nano1 to x-axis [0.000000] speed [8.000000];
	move nano2 to x-axis [0.000000] speed [8.000000];
	wait-for-move nano1 along x-axis;
	move nano1 to y-axis [0.000000] speed [8.000000];
	move nano2 to y-axis [0.000000] speed [8.000000];
	wait-for-move nano1 along y-axis;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = nano1;
	}
	if( spray == 1 )
	{
		piecenum = nano2;
	}
	spray = !spray;
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	call-script Activate();
}

StopBuilding()
{
	call-script Deactivate();
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	corpsetype = 3;
	if( severity <= 50 )
	{
		corpsetype = 2;
	}
	if( severity <= 25 )
	{
		corpsetype = 1;
	}
	explode body type BITMAPONLY | BITMAP3;
	explode legl3 type FALL | SMOKE | EXPLODE_ON_HIT;
	explode legl4 type FALL | SMOKE | EXPLODE_ON_HIT;
	explode legr1 type FALL | SMOKE | EXPLODE_ON_HIT;
	explode legr3 type FALL | SMOKE | EXPLODE_ON_HIT;
	explode nano1 type FALL | SMOKE | EXPLODE_ON_HIT;
	explode nano2 type FALL | SMOKE | EXPLODE_ON_HIT;
	return (corpsetype);
}
