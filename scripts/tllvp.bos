
piece base,body,pad,lights,arms,rnano,lnano,rspray,lspray;

static-var stage,spray;

#define	SIG_ACTIVATE 2
#define SMOKEPIECE1 pad
#define ANIM_VARIABLE TRUE

#include "StateChg.h"
#include "smokeunit.h"
#include "EXPtype.h"
#include "yard.h"

activatescr()
 { 


      dont-cache arms;
      dont-cache rnano;
      dont-cache lnano;
      dont-cache lights;
      move arms to y-axis [5] speed [10];
      wait-for-move arms along y-axis;
      turn rnano to z-axis <75> speed <120>;
      turn lnano to z-axis <-75> speed <120>;
      wait-for-turn lnano around z-axis;
 
  }

deactivatescr()
 { 
      turn rnano to z-axis <0> speed <150>;
      turn lnano to z-axis <0> speed <150>;
      wait-for-turn lnano around z-axis;
      move arms to y-axis [0] speed [15];

      cache arms;
      cache rnano;
      cache lnano;
      cache lights;
  }


Go()
 { call-script activatescr();
   call-script OpenYard();
   set INBUILDSTANCE to TRUE;
  }

Stop()
 { set INBUILDSTANCE to FALSE;
   call-script CloseYard();
   call-script deactivatescr();
  }


#define ACTIVATECMD call-script Go();
#define DEACTIVATECMD call-script Stop();
#include "StateChg.h"	// Second time (of two)

Create()
 { dont-shade pad;
   //dont-shade body;
   dont-shade lights;
   dont-shade rnano;
   dont-shade lnano;
   dont-shade arms;
   spray=0;
   call-script InitState();
   start-script SmokeUnit();
  }

QueryNanoPiece(piecenum)
{ piecenum=lspray;
  if( spray == 0 )
   { piecenum=rspray; }
  spray = !spray;
 }

Activate()
 { signal SIG_ACTIVATE;
   start-script RequestState( ACTIVE );
  }

Deactivate()
 { signal SIG_ACTIVATE;
   set-signal-mask SIG_ACTIVATE;
   sleep 5000;
   set-signal-mask 0;
   start-script RequestState( INACTIVE );
  }

StartBuilding()
 { spin pad around y-axis speed <30> accelerate <2>;
   dont-cache pad;
  }

StopBuilding()
 { stop-spin pad around y-axis decelerate <2>;
   cache pad;
  }

QueryBuildInfo(piecenum)
 { piecenum=pad;
  }

SweetSpot(piecenum)
 { piecenum=body;
  }

Killed( severity, corpsetype )
 { explode arms type BITMAPONLY | BITMAP4;
   explode body type BITMAPONLY | BITMAP4;
   explode pad type BITMAPONLY | BITMAP4;
   explode rnano type SHATTER | EXPLODE_ON_HIT | BITMAP3;
   explode lnano type SHATTER | EXPLODE_ON_HIT | BITMAP3;
   if (severity <= 25)
    { corpsetype = 1;
      return( 0 );
     }
   if (severity <= 50)
    { corpsetype = 2;
      explode arms type FALL | BITMAP2;
      explode lnano type FALL | BITMAP3;
      explode rnano type FALL | BITMAP4;
      explode lights type FALL | BITMAP5;
      return( 0 );
     }
   corpsetype = 3;
   explode lnano type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
   explode rnano type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
   explode pad type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
   explode lights type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
   explode body type SHATTER | EXPLODE_ON_HIT | BITMAP3;
   explode arms type SHATTER | EXPLODE_ON_HIT | BITMAP3;
  }
