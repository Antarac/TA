#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  ground, hips, luparm, lloarm, lhand, fingerla, fingerlb, thumbl,
       ruparm, rloarm, rhand, fingerra, fingerrb, thumbr, body, arml,
       cannonl, flarel, shellb, armr, cannonr, flarer, shella, missileflare,
       light, turret, flash, aimpointa;

static-var  Static_Var_1, gun_2, bMoving;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM_2			8
#define SIG_AIM_3			32


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from hips;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

walk()
{
	if( TRUE )
	{
		turn arml to x-axis <20.000000> speed <9.000000>;
		turn armr to x-axis <-20.000000> speed <18.000000>;
		turn luparm to x-axis <40.005495> speed <50.000000>;
		turn ruparm to x-axis <-40.005495> speed <50.000000>;
		turn lhand to x-axis <-30.005495> speed <70.000000>;
		turn rhand to x-axis <10.000000> speed <50.000000>;
		turn rloarm to x-axis <-20.000000> speed <70.000000>;
		turn body to x-axis <6.000000> speed <5.000000>;
		sleep 505;
		turn lhand to x-axis <40.005495> speed <100.000000>;
		turn rhand to x-axis <20.000000> speed <50.000000>;
		turn rloarm to x-axis <40.005495> speed <100.000000>;
		turn fingerla to x-axis <45.005495> speed <100.000000>;
		turn fingerlb to x-axis <45.005495> speed <100.000000>;
		turn thumbl to x-axis <-45.005495> speed <100.000000>;
		turn fingerra to x-axis <0.000000> speed <100.000000>;
		turn fingerrb to x-axis <0.000000> speed <100.000000>;
		sleep 600;
		turn thumbr to x-axis <0.000000> speed <100.000000>;
		move hips to y-axis [2.000000] speed [2.000000];
		turn hips to z-axis <7.000000> speed <3.000000>;
	}
	if( TRUE )
	{
		turn arml to x-axis <-20.000000> speed <20.000000>;
		turn armr to x-axis <20.000000> speed <20.000000>;
		turn luparm to x-axis <-40.005495> speed <50.000000>;
		turn ruparm to x-axis <40.005495> speed <50.000000>;
		turn rhand to x-axis <-40.005495> speed <130.000000>;
		turn lloarm to x-axis <-40.005495> speed <100.000000>;
		sleep 1050;
		turn rhand to x-axis <40.005495> speed <100.000000>;
		turn lloarm to x-axis <40.005495> speed <100.000000>;
		move hips to y-axis [0.000000] speed [2.000000];
		turn fingerla to x-axis <0.000000> speed <100.000000>;
		turn fingerlb to x-axis <0.000000> speed <100.000000>;
		turn fingerra to x-axis <45.005495> speed <100.000000>;
		turn fingerrb to x-axis <45.005495> speed <100.000000>;
		turn thumbr to x-axis <-45.005495> speed <100.000000>;
		sleep 600;
		turn thumbl to x-axis <0.000000> speed <100.000000>;
		move hips to y-axis [2.000000] speed [2.000000];
		turn hips to z-axis <-7.000000> speed <8.000000>;
		turn arml to x-axis <0.000000> speed <14.000000>;
		turn armr to x-axis <0.000000> speed <14.000000>;
	}
	while( TRUE )
	{
		if( TRUE )
		{
			turn body to y-axis <-10.000000> speed <12.000000>;
			turn body to x-axis <-5.000000> speed <6.000000>;
			turn luparm to x-axis <40.005495> speed <50.000000>;
			turn ruparm to x-axis <-40.005495> speed <50.000000>;
			turn lhand to x-axis <-40.005495> speed <130.000000>;
			turn rloarm to x-axis <-40.005495> speed <100.000000>;
			sleep 1050;
			turn lhand to x-axis <40.005495> speed <100.000000>;
			turn rhand to x-axis <40.005495> speed <70.000000>;
			turn rloarm to x-axis <40.005495> speed <100.000000>;
			move hips to y-axis [0.000000] speed [2.000000];
			turn fingerla to x-axis <45.005495> speed <100.000000>;
			turn fingerlb to x-axis <45.005495> speed <100.000000>;
			turn thumbl to x-axis <-45.005495> speed <100.000000>;
			turn fingerra to x-axis <0.000000> speed <100.000000>;
			turn fingerrb to x-axis <0.000000> speed <100.000000>;
			sleep 600;
			turn thumbr to x-axis <0.000000> speed <100.000000>;
			move hips to y-axis [2.000000] speed [2.000000];
			turn hips to z-axis <7.000000> speed <8.000000>;
		}
		if( TRUE )
		{
			turn body to y-axis <10.000000> speed <12.000000>;
			turn body to x-axis <6.000000> speed <6.000000>;
			turn luparm to x-axis <-40.005495> speed <50.000000>;
			turn ruparm to x-axis <40.005495> speed <50.000000>;
			turn rhand to x-axis <-40.005495> speed <130.000000>;
			turn lloarm to x-axis <-40.005495> speed <100.000000>;
			sleep 1050;
			turn rhand to x-axis <40.005495> speed <100.000000>;
			turn lloarm to x-axis <40.005495> speed <100.000000>;
			move hips to y-axis [0.000000] speed [2.000000];
			turn fingerla to x-axis <0.000000> speed <100.000000>;
			turn fingerlb to x-axis <0.000000> speed <100.000000>;
			turn fingerra to x-axis <45.005495> speed <100.000000>;
			turn fingerrb to x-axis <45.005495> speed <100.000000>;
			turn thumbr to x-axis <-45.005495> speed <100.000000>;
			sleep 600;
			turn thumbl to x-axis <0.000000> speed <100.000000>;
			move hips to y-axis [2.000000] speed [2.000000];
			turn hips to z-axis <-7.000000> speed <8.000000>;
		}
	}
}

stop()
{
	turn luparm to x-axis <0.000000> speed <50.000000>;
	turn ruparm to x-axis <0.000000> speed <50.000000>;
	turn lloarm to x-axis <0.000000> speed <100.000000>;
	turn rloarm to x-axis <0.000000> speed <100.000000>;
	turn body to y-axis <0.000000> speed <100.000000>;
	turn body to x-axis <0.000000> speed <20.000000>;
	move hips to y-axis [0.000000] speed [20.000000];
	turn hips to z-axis <0.000000> speed <20.000000>;
	turn fingerra to x-axis <0.000000> speed <100.000000>;
	turn fingerrb to x-axis <0.000000> speed <100.000000>;
	turn thumbr to x-axis <0.000000> speed <100.000000>;
	turn fingerla to x-axis <0.000000> speed <100.000000>;
	turn fingerlb to x-axis <0.000000> speed <100.000000>;
	turn thumbl to x-axis <0.000000> speed <100.000000>;
	turn rhand to x-axis <0.000000> speed <100.000000>;
	turn lhand to x-axis <0.000000> speed <100.000000>;
	wait-for-turn body around x-axis;
	turn body to x-axis <10.000000> speed <48.000000>;
	turn arml to x-axis <-10.000000> speed <48.000000>;
	turn armr to x-axis <-10.000000> speed <48.000000>;
	wait-for-turn body around x-axis;
	turn body to x-axis <-3.000000> speed <48.000000>;
	wait-for-turn body around x-axis;
	turn body to x-axis <0.000000> speed <48.000000>;
	turn arml to x-axis <0.000000> speed <48.000000>;
	turn armr to x-axis <0.000000> speed <48.000000>;
	wait-for-turn body around x-axis;
	bMoving = TRUE;
	sleep 20;
}

Create()
{
	hide flarel;
	hide shellb;
	hide flarer;
	hide shella;
	hide missileflare;
	hide flash;
	hide aimpointa;
	cache arml;
	cache lloarm;
	cache lhand;
	cache fingerla;
	cache fingerlb;
	cache thumbl;
	cache armr;
	cache rloarm;
	cache rhand;
	cache fingerra;
	cache fingerrb;
	cache thumbr;
	cache body;
	dont-shade flarel;
	dont-shade shellb;
	dont-shade flarer;
	dont-shade shella;
	dont-shade missileflare;
	dont-shade light;
	dont-shade flash;
	dont-cache light;
	gun_2 = ground;
	bMoving = TRUE;
	Static_Var_1 = 4000;
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script walk();
}

StopMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	start-script stop();
}

SweetSpot(piecenum)
{
	piecenum = hips;
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	turn turret to y-axis <0.000000> speed <225.000000>;
	turn body to y-axis <0.000000> speed <100.000000>;
	turn arml to x-axis <0.000000> speed <20.000000>;
	turn armr to x-axis <0.000000> speed <20.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn body around y-axis;
	wait-for-turn arml around x-axis;
	wait-for-turn armr around x-axis;
	bMoving = TRUE;
}

AimPrimary(heading, pitch)
{
	bMoving = TRUE;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <450.000000>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show flash;
	sleep 150;
	hide flash;
}

QueryPrimary(piecenum)
{
	piecenum = flash;
}

AimSecondary(heading, pitch)
{
	bMoving = FALSE;
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn body to y-axis heading speed <150.000000>;
	turn arml to x-axis <0.000000> - pitch speed <40.000000>;
	turn armr to x-axis <0.000000> - pitch speed <40.000000>;
	turn turret to y-axis heading speed <450.000000>;
	wait-for-turn body around y-axis;
	wait-for-turn arml around x-axis;
	wait-for-turn armr around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		move cannonl to z-axis [-2.289990] now;
		emit-sfx 1024 + 0 from flarel;
		move cannonl to z-axis [0.000000] speed [5.000000];
	}
	if( gun_2 == 1 )
	{
		move cannonr to z-axis [-2.289990] now;
		emit-sfx 1024 + 0 from flarer;
		move cannonr to z-axis [0.000000] speed [5.000000];
	}
	gun_2 = !gun_2;
	bMoving = TRUE;
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flarel;
	}
	if( gun_2 == 1 )
	{
		piecenum = flarer;
	}
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	bMoving = TRUE;
	while( !bMoving )
	{
		sleep 300;
	}
	turn body to y-axis heading speed <150.000000>;
	turn turret to y-axis heading speed <450.000000>;
	wait-for-turn body around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
}

QueryTertiary(piecenum)
{
	piecenum = missileflare;
}

AimFromPrimary(piecenum)
{
	piecenum = flash;
}

AimFromSecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = aimpointa;
	}
	if( gun_2 == 1 )
	{
		piecenum = aimpointa;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = missileflare;
}

Killed(severity, corpsetype)
{
	hide flash;
	hide flarel;
	hide flarer;
	hide missileflare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode hips type NOHEATCLOUD | BITMAP1;
		explode luparm type NOHEATCLOUD | BITMAP2;
		explode lloarm type NOHEATCLOUD | BITMAP3;
		explode lhand type NOHEATCLOUD | BITMAP4;
		explode fingerla type NOHEATCLOUD | BITMAP5;
		explode fingerlb type NOHEATCLOUD | BITMAP1;
		explode thumbl type NOHEATCLOUD | BITMAP2;
		explode ruparm type NOHEATCLOUD | BITMAP3;
		explode rloarm type NOHEATCLOUD | BITMAP4;
		explode rhand type NOHEATCLOUD | BITMAP5;
		explode fingerra type NOHEATCLOUD | BITMAP1;
		explode fingerrb type NOHEATCLOUD | BITMAP2;
		explode thumbr type NOHEATCLOUD | BITMAP3;
		explode body type NOHEATCLOUD | BITMAP4;
		explode arml type NOHEATCLOUD | BITMAP5;
		explode cannonl type NOHEATCLOUD | BITMAP1;
		explode flarel type NOHEATCLOUD | BITMAP2;
		explode armr type NOHEATCLOUD | BITMAP3;
		explode cannonr type NOHEATCLOUD | BITMAP4;
		explode flarer type NOHEATCLOUD | BITMAP5;
		explode missileflare type NOHEATCLOUD | BITMAP1;
		explode light type NOHEATCLOUD | BITMAP2;
		explode turret type NOHEATCLOUD | BITMAP3;
		explode flash type NOHEATCLOUD | BITMAP4;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode hips type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode luparm type NOHEATCLOUD | FALL | BITMAP2;
		explode lloarm type NOHEATCLOUD | FALL | BITMAP3;
		explode lhand type NOHEATCLOUD | FALL | BITMAP4;
		explode fingerla type NOHEATCLOUD | FALL | BITMAP5;
		explode fingerlb type NOHEATCLOUD | FALL | BITMAP1;
		explode thumbl type NOHEATCLOUD | FALL | BITMAP2;
		explode ruparm type NOHEATCLOUD | FALL | BITMAP3;
		explode rloarm type NOHEATCLOUD | FALL | BITMAP4;
		explode rhand type NOHEATCLOUD | FALL | BITMAP5;
		explode fingerra type NOHEATCLOUD | FALL | BITMAP1;
		explode fingerrb type NOHEATCLOUD | FALL | BITMAP2;
		explode thumbr type NOHEATCLOUD | FALL | BITMAP3;
		explode body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode arml type NOHEATCLOUD | FALL | BITMAP5;
		explode cannonl type NOHEATCLOUD | FALL | BITMAP1;
		explode flarel type NOHEATCLOUD | FALL | BITMAP2;
		explode armr type NOHEATCLOUD | FALL | BITMAP3;
		explode cannonr type NOHEATCLOUD | FALL | BITMAP4;
		explode flarer type NOHEATCLOUD | FALL | BITMAP5;
		explode missileflare type NOHEATCLOUD | FALL | BITMAP1;
		explode light type NOHEATCLOUD | SHATTER | BITMAP2;
		explode turret type NOHEATCLOUD | FALL | BITMAP3;
		explode flash type NOHEATCLOUD | FALL | BITMAP4;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode hips type NOHEATCLOUD | SHATTER | BITMAP1;
		explode luparm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lloarm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lhand type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode fingerla type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode fingerlb type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode thumbl type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode ruparm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rloarm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rhand type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode fingerra type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode fingerrb type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode thumbr type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode body type NOHEATCLOUD | SHATTER | BITMAP4;
		explode arml type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode cannonl type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flarel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode armr type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode cannonr type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flarer type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode missileflare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode light type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flash type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (corpsetype);
	}
	corpsetype = 3;
	explode hips type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode luparm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lloarm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lhand type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode fingerla type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode fingerlb type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode thumbl type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode ruparm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rloarm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rhand type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode fingerra type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode fingerrb type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode thumbr type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode arml type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode cannonl type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode flarel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode armr type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode cannonr type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flarer type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode missileflare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode light type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flash type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	return (corpsetype);
}
