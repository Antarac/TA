#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, nano1, nano2, nano3, nano4, arm1a, arm1b,
       arm2a, arm2b, arm3a, arm3b, arm4a, arm4b, gun1, gun2,
       radar, sphere1, sphere2, light, support1, support2, support3, support4,
       mast;

static-var  Static_Var_1, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2
#define SIG_AIM				4
#define SIG_AIM_3			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	show arm1a;
	show arm2a;
	show arm3a;
	show arm4a;
	show arm1b;
	show arm2b;
	show arm3b;
	show arm4b;
	move arm1a to z-axis [27.000000] speed [10.000000];
	move arm1b to z-axis [27.000000] speed [10.000000];
	move arm2a to z-axis [27.000000] speed [10.000000];
	move arm2b to z-axis [27.000000] speed [10.000000];
	move arm3a to z-axis [27.000000] speed [10.000000];
	move arm3b to z-axis [27.000000] speed [10.000000];
	move arm4a to z-axis [27.000000] speed [10.000000];
	move arm4b to z-axis [27.000000] speed [10.000000];
	wait-for-move arm1a along z-axis;
	turn arm1a to x-axis <45.010989> speed <10.000000>;
	turn arm2a to x-axis <45.010989> speed <10.000000>;
	turn arm3a to x-axis <45.010989> speed <10.000000>;
	turn arm4a to x-axis <45.010989> speed <10.000000>;
	turn arm1b to x-axis <-45.010989> speed <10.000000>;
	turn arm2b to x-axis <-45.010989> speed <10.000000>;
	turn arm3b to x-axis <-45.010989> speed <10.000000>;
	turn arm4b to x-axis <-45.010989> speed <10.000000>;
	wait-for-turn arm1a around x-axis;
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	turn arm1a to x-axis <0.000000> speed <15.000000>;
	turn arm2a to x-axis <0.000000> speed <15.000000>;
	turn arm3a to x-axis <0.000000> speed <15.000000>;
	turn arm4a to x-axis <0.000000> speed <15.000000>;
	turn arm1b to x-axis <0.000000> speed <15.000000>;
	turn arm2b to x-axis <0.000000> speed <15.000000>;
	turn arm3b to x-axis <0.000000> speed <15.000000>;
	turn arm4b to x-axis <0.000000> speed <15.000000>;
	wait-for-turn arm1a around x-axis;
	move arm1a to z-axis [0.000000] speed [15.000000];
	move arm1b to z-axis [0.000000] speed [15.000000];
	move arm2a to z-axis [0.000000] speed [15.000000];
	move arm2b to z-axis [0.000000] speed [15.000000];
	move arm3a to z-axis [0.000000] speed [15.000000];
	move arm3b to z-axis [0.000000] speed [15.000000];
	move arm4a to z-axis [0.000000] speed [15.000000];
	move arm4b to z-axis [0.000000] speed [15.000000];
	wait-for-move arm1a along z-axis;
	hide arm1a;
	hide arm1b;
	hide arm2a;
	hide arm2b;
	hide arm3a;
	hide arm3b;
	hide arm4a;
	hide arm4b;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide arm1a;
	hide arm1b;
	hide arm2a;
	hide arm2b;
	hide arm3a;
	hide arm3b;
	hide arm4a;
	hide arm4b;
	dont-shade radar;
	dont-cache sphere1;
	dont-cache sphere2;
	turn pad to y-axis <-90.021978> now;
	hide pad;
	unitviewer = FALSE;
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	spin radar around y-axis speed <30.005495>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn gun1 to y-axis heading speed <150.000000>;
	turn gun1 to x-axis <0.000000> - pitch speed <130.000000>;
	wait-for-turn gun1 around y-axis;
	wait-for-turn gun1 around x-axis;
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = gun1;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn gun2 to y-axis heading speed <150.000000>;
	turn gun2 to x-axis <0.000000> - pitch speed <130.000000>;
	wait-for-turn gun2 around y-axis;
	wait-for-turn gun2 around x-axis;
	return (1);
}

AimFromTertiary(piecenum)
{
	piecenum = gun2;
}

QueryPrimary(piecenum)
{
	piecenum = gun1;
}

QueryTertiary(piecenum)
{
	piecenum = gun2;
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = nano1;
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = nano2;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = nano3;
	}
	if( Static_Var_1 == 3 )
	{
		piecenum = nano4;
	}
	++Static_Var_1;
	if( Static_Var_1 == 4 )
	{
		Static_Var_1 = 0;
	}
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 1000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
}

StopBuilding()
{
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP5;
		explode arm1a type BITMAPONLY | BITMAP2;
		explode arm2a type BITMAPONLY | BITMAP3;
		explode arm1b type BITMAPONLY | BITMAP2;
		explode arm2b type BITMAPONLY | BITMAP3;
		explode arm3a type BITMAPONLY | BITMAP2;
		explode arm3b type BITMAPONLY | BITMAP3;
		explode support1 type BITMAPONLY | BITMAP5;
		explode support2 type BITMAPONLY | BITMAP5;
		explode support3 type BITMAPONLY | BITMAP5;
		explode pad type BITMAPONLY | BITMAP5;
		explode radar type SMOKE;
		explode support4 type SHATTER | BITMAP5;
		explode arm4a type FALL | SMOKE;
		explode arm4b type FALL | SMOKE;
		explode gun1 type SMOKE;
		explode gun2 type SMOKE;
		explode sphere1 type SHATTER | BITMAP5;
		explode sphere2 type FALL | FIRE | BITMAP5;
		explode light type SHATTER;
		explode mast type SHATTER;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP5;
		explode arm1a type SMOKE | BITMAP2;
		explode arm2a type FIRE | BITMAP3;
		explode arm1b type FIRE | BITMAP2;
		explode arm2b type SMOKE | BITMAP3;
		explode arm3a type SMOKE | BITMAP2;
		explode arm3b type SMOKE | BITMAP3;
		explode support1 type SHATTER | BITMAP5;
		explode support2 type SHATTER | BITMAP5;
		explode support3 type FIRE | BITMAP5;
		explode pad type FIRE | BITMAP5;
		explode radar type FIRE;
		explode support4 type SHATTER | BITMAP5;
		explode arm4a type FIRE;
		explode arm4b type FIRE;
		explode gun1 type FIRE;
		explode gun2 type FIRE;
		explode sphere1 type SHATTER | BITMAP5;
		explode sphere2 type SHATTER | BITMAP5;
		explode light type SHATTER;
		explode mast type SHATTER;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP5;
		explode arm1a type SHATTER | BITMAP2;
		explode arm2a type FIRE | BITMAP3;
		explode arm1b type FIRE | BITMAP2;
		explode arm2b type FIRE | BITMAP3;
		explode arm3a type SHATTER | BITMAP2;
		explode arm3b type FIRE | BITMAP3;
		explode support1 type SHATTER | BITMAP5;
		explode support2 type SHATTER | BITMAP5;
		explode support3 type FIRE | BITMAP5;
		explode pad type FIRE | BITMAP5;
		explode radar type FIRE;
		explode support4 type SHATTER | BITMAP5;
		explode arm4a type FIRE;
		explode arm4b type SHATTER;
		explode gun1 type SHATTER;
		explode gun2 type FIRE;
		explode sphere1 type SHATTER | BITMAP5;
		explode sphere2 type SHATTER | BITMAP5;
		explode light type SHATTER;
		explode mast type SHATTER;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | BITMAP5;
	explode arm1a type SHATTER | BITMAP2;
	explode arm2a type SHATTER | BITMAP3;
	explode arm1b type SHATTER | BITMAP2;
	explode arm2b type SHATTER | BITMAP3;
	explode arm3a type SHATTER | BITMAP2;
	explode arm3b type SHATTER | BITMAP3;
	explode support1 type SHATTER | BITMAP5;
	explode support2 type SHATTER | BITMAP5;
	explode support3 type SHATTER | BITMAP5;
	explode pad type FIRE | BITMAP5;
	explode radar type SHATTER;
	explode support4 type SHATTER | BITMAP5;
	explode arm4a type SHATTER;
	explode arm4b type SHATTER;
	explode gun1 type SHATTER;
	explode gun2 type SHATTER;
	explode sphere1 type SHATTER | BITMAP5;
	explode sphere2 type SHATTER | BITMAP5;
	explode light type SHATTER;
	explode mast type SHATTER;
}
