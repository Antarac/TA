#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, rotor, engine, door1, door2, door3, wake1,
       wake2, wake3, wake4;

static-var  Static_Var_1, mmState, Active;


activatescr()
{
	move body to y-axis [0.000000] speed [8.000000];
	emit-sfx 256 | 3 from wake1;
	emit-sfx 256 | 3 from wake2;
	emit-sfx 256 | 3 from wake3;
	emit-sfx 256 | 3 from wake4;
	sleep 300;
	emit-sfx 256 | 3 from wake1;
	emit-sfx 256 | 3 from wake2;
	emit-sfx 256 | 3 from wake3;
	emit-sfx 256 | 3 from wake4;
	turn door3 to y-axis <180.000000> speed <200.000000>;
	wait-for-turn door3 around y-axis;
	move door3 to y-axis [-7.000000] speed [15.000000];
	wait-for-move door3 along y-axis;
	hide door3;
	turn door2 to y-axis <-180.000000> speed <200.000000>;
	wait-for-turn door2 around y-axis;
	move door2 to y-axis [-7.000000] speed [15.000000];
	wait-for-move door2 along y-axis;
	hide door2;
	emit-sfx 256 | 3 from wake1;
	emit-sfx 256 | 3 from wake2;
	emit-sfx 256 | 3 from wake3;
	emit-sfx 256 | 3 from wake4;
	turn door1 to y-axis <180.000000> speed <200.000000>;
	wait-for-turn door1 around y-axis;
	move door1 to y-axis [-7.000000] speed [15.000000];
	wait-for-move door1 along y-axis;
	hide door1;
	show engine;
	show rotor;
	move engine to y-axis [0.000000] speed [5.000000];
	wait-for-move engine along y-axis;
	spin rotor around y-axis speed <60.000000>;
	sleep 125;
}

deactivatescr()
{
	move engine to y-axis [-5.000000] speed [10.000000];
	stop-spin rotor around y-axis;
	move engine to y-axis [-5.000000] speed [10.000000];
	wait-for-move engine along y-axis;
	hide engine;
	hide rotor;
	show door1;
	move door1 to y-axis [0.000000] speed [15.000000];
	wait-for-move door1 along y-axis;
	turn door1 to y-axis <0.000000> speed <200.000000>;
	wait-for-turn door1 around y-axis;
	show door2;
	move door2 to y-axis [0.000000] speed [15.000000];
	wait-for-move door2 along y-axis;
	turn door2 to y-axis <0.000000> speed <200.000000>;
	wait-for-turn door2 around y-axis;
	show door3;
	move door3 to y-axis [0.000000] speed [15.000000];
	wait-for-move door3 along y-axis;
	turn door3 to y-axis <0.000000> speed <200.000000>;
	wait-for-turn door3 around y-axis;
	move body to y-axis [-10.000000] speed [8.000000];
	sleep 150;
	emit-sfx 256 | 3 from wake1;
	emit-sfx 256 | 3 from wake2;
	emit-sfx 256 | 3 from wake3;
	emit-sfx 256 | 3 from wake4;
	sleep 16;
	emit-sfx 256 | 3 from wake1;
	emit-sfx 256 | 3 from wake2;
	emit-sfx 256 | 3 from wake3;
	emit-sfx 256 | 3 from wake4;
	sleep 16;
	emit-sfx 256 | 3 from wake1;
	emit-sfx 256 | 3 from wake2;
	emit-sfx 256 | 3 from wake3;
	emit-sfx 256 | 3 from wake4;
}

Go()
{
	call-script activatescr();
	dont-cache engine;
	dont-cache rotor;
	set ARMORED to 0;
}

Stop()
{
	call-script deactivatescr();
	set ARMORED to 1;
	cache engine;
	cache rotor;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Tangue()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn base to x-axis rockAng speed rockSpeed*5;
			turn base to z-axis rockAng speed rockSpeed*5;
			wait-for-turn base around x-axis;
			wait-for-turn base around z-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}

MMStatus(State)
{
	Active = State;
	//get PRINT(Active);
}

ImAMetalMaker()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 150;
	}
	mmState = -1;
	while( TRUE )
	{	
		if (Active == 1)
		{
			if (mmState != 1) {
				call-script Go();
				mmState = 1;
			}
		}
		else
		{
			if (mmState != 0) {
				call-script Stop();
				mmState = 0;
			}
		}
		sleep 1000;
	}
}

Create()
{
	dont-shade body;
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	move body to y-axis [-10.000000] now;
	start-script ImAMetalMaker();
	start-script SmokeUnit();
	start-script Tangue();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode rotor type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP3;
		explode rotor type SHATTER | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode body type BITMAPONLY | BITMAP3;
	explode rotor type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
