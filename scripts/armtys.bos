#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, larm, rarm, lgun, rgun, rotor, tail;

static-var  gun_1;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver3.0 beta2 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.netzine.ml.org/DCS   
}

activatescr()
{
	move tail to z-axis [-5.000000] speed [6.000000];
	move larm to x-axis [3.000000] speed [4.000000];
	move rarm to x-axis [-3.000000] speed [4.000000];
	spin rotor around y-axis speed <777.708791>;
}

deactivatescr()
{
	move tail to z-axis [0.000000] speed [5.000000];
	move larm to x-axis [0.000000] speed [5.000000];
	move rarm to x-axis [0.000000] speed [5.000000];
	stop-spin rotor around y-axis decelerate <2.000000>;
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.010989>;
	turn base to z-axis anglez speed <50.010989>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

Create()
{
	call-script deactivatescr();
}

Activate()
{
	call-script activatescr();
}

Deactivate()
{
	call-script deactivatescr();
}

FirePrimary()
{
	if( gun_1 == 1 )
	{
		gun_1 = rarm;
		start-script RockUnit();
	}
	if( gun_1 == 2 )
	{
		start-script RockUnit();
		gun_1 = larm;
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = lgun;
	}
	if( gun_1 == 2 )
	{
		piecenum = rgun;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	return (1);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type SHATTER | BITMAPONLY | BITMAP1;
		explode rotor type SHATTER | BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type FALL | SHATTER | BITMAPONLY | BITMAP1;
		explode lgun type FALL | SHATTER | BITMAPONLY | BITMAP1;
		explode rotor type FALL | SHATTER | BITMAPONLY | BITMAP1;
		explode rgun type FALL | SHATTER | BITMAPONLY | BITMAP1;
		explode tail type FALL | SHATTER | BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SHATTER | BITMAPONLY | BITMAP1;
		explode rgun type FALL | SHATTER | BITMAPONLY | BITMAP1;
		explode lgun type FALL | SHATTER | BITMAPONLY | BITMAP1;
		explode rotor type FALL | SHATTER | BITMAPONLY | BITMAP1;
		explode tail type FALL | SHATTER | BITMAPONLY | BITMAP1;
		explode larm type FALL | SHATTER | BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | BITMAPONLY | BITMAP1;
}
