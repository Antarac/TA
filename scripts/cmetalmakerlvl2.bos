#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flap2, flap3, flap4, flap1, topcap, glowingthing;

static-var  Active, mmState;

activatescr()
{
	if( TRUE )
	{
		move flap2 to z-axis [0.000000] now;
		move flap3 to z-axis [0.000000] now;
		move flap4 to x-axis [0.000000] now;
		turn flap3 to z-axis <0.000000> now;
		turn flap3 to z-axis <-69.340659> speed <261.664835>;
		sleep 265;
	}
	if( TRUE )
	{
		turn flap2 to x-axis <-4.862637> speed <18.291209>;
		turn flap4 to x-axis <-86.368132> speed <324.703297>;
		sleep 266;
	}
	if( TRUE )
	{
		turn flap2 to z-axis <69.340659> speed <260.681319>;
		sleep 266;
	}
	if( TRUE )
	{
		turn flap1 to x-axis <89.412088> speed <336.137363>;
		sleep 266;
	}
	if( TRUE )
	{
		turn topcap to y-axis <45.010989> speed <169.208791>;
		sleep 266;
	}
	if( TRUE )
	{
		move topcap to y-axis [-16.050006] speed [60.112384];
		sleep 267;
	}
	if( TRUE )
	{
		turn topcap to z-axis <-180.043956> speed <676.851648>;
		sleep 266;
	}
	if( TRUE )
	{
		move topcap to y-axis [-0.700006] speed [57.706769];
		sleep 266;
	}
	sleep 266;
}

deactivatescr()
{
	if( TRUE )
	{
		move flap2 to z-axis [0.000000] now;
		move flap3 to z-axis [0.000000] now;
		move flap4 to x-axis [0.000000] now;
		move topcap to y-axis [-0.700006] now;
		move topcap to y-axis [-16.050006] speed [57.924530];
		turn flap1 to x-axis <89.412088> now;
		turn flap2 to x-axis <-4.862637> now;
		turn flap2 to z-axis <69.340659> now;
		turn flap3 to z-axis <-69.340659> now;
		turn flap4 to x-axis <-86.368132> now;
		turn topcap to y-axis <45.010989> now;
		turn topcap to z-axis <-180.043956> now;
		sleep 265;
	}
	if( TRUE )
	{
		turn topcap to z-axis <0.000000> speed <676.851648>;
		sleep 266;
	}
	if( TRUE )
	{
		move topcap to y-axis [0.000000] speed [60.338373];
		sleep 266;
	}
	if( TRUE )
	{
		turn topcap to y-axis <0.000000> speed <169.208791>;
		sleep 266;
	}
	if( TRUE )
	{
		turn flap1 to x-axis <0.000000> speed <334.879121>;
		sleep 267;
	}
	if( TRUE )
	{
		turn flap2 to z-axis <0.000000> speed <260.681319>;
		sleep 266;
	}
	if( TRUE )
	{
		turn flap2 to x-axis <0.000000> speed <18.291209>;
		turn flap4 to x-axis <0.000000> speed <324.703297>;
		sleep 266;
	}
	if( TRUE )
	{
		turn flap3 to z-axis <0.000000> speed <260.681319>;
		sleep 266;
	}
	sleep 266;
}


Go()
{
	dont-cache flap1;
	dont-cache flap2;
	dont-cache flap3;
	dont-cache flap4;
	dont-cache topcap;
	call-script activatescr();
}

Stop()
{
	call-script deactivatescr();
	cache flap1;
	cache flap2;
	cache flap3;
	cache flap4;
	cache topcap;
}

MMStatus(State)
{
	Active = State;
	//get PRINT(Active);
}

ImAMetalMaker()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 150;
	}
	mmState = -1;
	while( TRUE )
	{
		if( Active == 1 )
		{
			if( mmState != 1 )
			{
				call-script Go();
				mmState = 1;
			}
		}
		else if( mmState != 0 )
		{
			call-script Stop();
			mmState = 0;
		}
		sleep 1000;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script ImAMetalMaker();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	dont-shade glowingthing;
	dont-cache glowingthing;
	dont-shade base;
	dont-shade flap1;
	dont-shade flap2;
	dont-shade flap3;
	dont-shade flap4;
	dont-shade topcap;
	start-script SmokeUnit();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode glowingthing type BITMAPONLY | BITMAP2;
		explode flap1 type BITMAPONLY | BITMAP3;
		explode flap2 type BITMAPONLY | BITMAP4;
		explode flap3 type BITMAPONLY | BITMAP5;
		explode flap4 type BITMAPONLY | BITMAP1;
		explode topcap type BITMAPONLY | BITMAP2;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode glowingthing type SHATTER | BITMAP2;
		explode flap1 type FALL | BITMAP3;
		explode flap2 type FALL | BITMAP4;
		explode flap3 type FALL | BITMAP5;
		explode flap4 type FALL | BITMAP1;
		explode topcap type BITMAPONLY | BITMAP2;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode glowingthing type SHATTER | BITMAP2;
		explode flap1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flap2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flap3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode flap4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode topcap type BITMAPONLY | BITMAP2;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode glowingthing type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode flap1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flap2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flap3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode flap4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode topcap type BITMAPONLY | BITMAP2;
	return (corpsetype);
}
