#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  torso, head, arms, belly, lthigh, lleg, rleg, flare1,
       flare2, pelvis, rthigh, lfoot, rfoot, ground;

static-var  restore_delay, gun_1;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4


walk()
{
	while( TRUE )
	{
		if( TRUE )
		{
			move belly to y-axis [0.000000] now;
			move lthigh to y-axis [0.000000] now;
			move lleg to y-axis [0.600000] speed [3.986577];
			move rleg to y-axis [0.000000] now;
			move torso to y-axis [-0.400000] speed [2.657718];
			move arms to y-axis [0.000000] now;
			turn pelvis to z-axis <2.796703> speed <18.582121>;
			turn belly to x-axis <-6.000000> speed <39.865772>;
			turn rthigh to x-axis <14.395604> speed <95.648644>;
			turn lthigh to x-axis <-44.697802> speed <296.985396>;
			turn lleg to x-axis <-1.000000> speed <6.644295>;
			turn lfoot to x-axis <10.895604> speed <72.393610>;
			turn rleg to x-axis <6.296703> speed <41.837154>;
			turn rfoot to x-axis <-13.697802> speed <91.012241>;
			turn torso to x-axis <-0.296703> speed <1.971382>;
			sleep 130;
		}
		if( TRUE )
		{
			move lthigh to y-axis [0.600000] speed [3.986577];
			move lleg to y-axis [0.000000] speed [3.986577];
			move torso to y-axis [0.000000] speed [2.657718];
			turn pelvis to z-axis <6.697802> speed <25.920054>;
			turn belly to x-axis <-4.598901> speed <9.309316>;
			turn rthigh to x-axis <21.500000> speed <47.203705>;
			turn lthigh to x-axis <-23.895604> speed <138.215946>;
			turn lleg to x-axis <7.395604> speed <55.782872>;
			turn lfoot to x-axis <16.500000> speed <37.237262>;
			turn rleg to x-axis <12.697802> speed <42.530792>;
			turn rfoot to x-axis <-3.500000> speed <67.757208>;
			turn torso to x-axis <2.796703> speed <20.553503>;
			sleep 130;
		}
		if( TRUE )
		{
			turn belly to x-axis <3.197802> speed <51.803597>;
			sleep 130;
		}
		if( TRUE )
		{
			turn belly to x-axis <2.098901> speed <7.301423>;
			turn torso to x-axis <11.598901> speed <58.484403>;
			sleep 130;
		}
		if( TRUE )
		{
			move rthigh to y-axis [0.200000] speed [1.328859];
			move lthigh to y-axis [0.300000] speed [1.993289];
			move rleg to y-axis [0.500000] speed [3.322148];
			move torso to y-axis [-0.100000] speed [0.664430];
			turn pelvis to z-axis <5.296703> speed <9.309316>;
			turn belly to x-axis <0.000000> speed <13.945718>;
			turn rthigh to x-axis <14.098901> speed <49.175087>;
			turn lthigh to x-axis <-14.395604> speed <63.120805>;
			turn lfoot to x-axis <6.296703> speed <67.793718>;
			turn rleg to x-axis <8.098901> speed <30.556456>;
			turn rfoot to x-axis <-2.500000> speed <6.644295>;
			turn torso to x-axis <5.296703> speed <41.873665>;
			sleep 130;
		}
		if( TRUE )
		{
			move lthigh to y-axis [0.100000] speed [1.328859];
			move rleg to y-axis [0.800000] speed [1.993289];
			move torso to y-axis [-0.200000] speed [0.664430];
			turn pelvis to z-axis <3.500000> speed <11.937825>;
			turn belly to x-axis <5.296703> speed <35.192859>;
			turn rthigh to x-axis <3.500000> speed <70.422228>;
			turn lthigh to x-axis <-1.395604> speed <86.375839>;
			turn lfoot to x-axis <-6.000000> speed <81.702926>;
			turn torso to x-axis <3.197802> speed <13.945718>;
			sleep 120;
		}
		if( TRUE )
		{
			move lthigh to y-axis [0.000000] speed [0.664430];
			move torso to y-axis [-0.100000] speed [0.664430];
			turn pelvis to z-axis <0.000000> speed <23.255034>;
			turn belly to x-axis <2.500000> speed <18.582121>;
			turn rthigh to x-axis <-6.697802> speed <67.757208>;
			turn lthigh to x-axis <4.197802> speed <37.164241>;
			turn lfoot to x-axis <-11.598901> speed <37.200752>;
			turn torso to x-axis <8.098901> speed <32.564349>;
			sleep 110;
		}
		if( TRUE )
		{
			move rleg to y-axis [0.800000] now;
			move torso to y-axis [0.000000] speed [0.664430];
			turn pelvis to z-axis <-1.395604> speed <9.272805>;
			turn belly to x-axis <-3.895604> speed <42.494282>;
			turn rthigh to x-axis <-17.895604> speed <74.401503>;
			turn lthigh to x-axis <8.796703> speed <30.556456>;
			turn torso to x-axis <7.395604> speed <4.672913>;
			sleep 110;
		}
		if( TRUE )
		{
			move rleg to y-axis [0.100000] speed [4.651007];
			turn pelvis to z-axis <-2.796703> speed <9.309316>;
			turn belly to x-axis <-7.395604> speed <23.255034>;
			turn rthigh to x-axis <-36.895604> speed <126.241611>;
			turn lthigh to x-axis <15.796703> speed <46.510067>;
			turn lfoot to x-axis <-6.296703> speed <35.229369>;
			turn rleg to x-axis <-9.796703> speed <118.903678>;
			turn torso to x-axis <1.796703> speed <37.200752>;
			sleep 110;
		}
		if( TRUE )
		{
			move rthigh to y-axis [0.600000] speed [2.657718];
			move lleg to y-axis [0.400000] speed [2.657718];
			move torso to y-axis [-0.100000] speed [0.664430];
			turn pelvis to z-axis <-6.697802> speed <25.920054>;
			turn belly to x-axis <1.098901> speed <56.440000>;
			turn lthigh to x-axis <22.895604> speed <47.167195>;
			turn lfoot to x-axis <-2.796703> speed <23.255034>;
			turn rleg to x-axis <10.197802> speed <132.849396>;
			turn rfoot to x-axis <27.395604> speed <198.635221>;
			turn torso to x-axis <-2.500000> speed <28.548564>;
			sleep 130;
		}
		if( TRUE )
		{
			turn belly to x-axis <13.000000> speed <79.074416>;
			sleep 130;
		}
		if( TRUE )
		{
			turn belly to x-axis <9.098901> speed <25.920054>;
			turn torso to x-axis <8.395604> speed <72.393610>;
			sleep 130;
		}
		if( TRUE )
		{
			move rthigh to y-axis [0.300000] speed [1.993289];
			move lleg to y-axis [0.700000] speed [1.993289];
			move torso to y-axis [-0.100000] now;
			turn pelvis to z-axis <-5.296703> speed <9.309316>;
			turn belly to x-axis <7.000000> speed <13.945718>;
			turn rthigh to x-axis <-22.500000> speed <95.648644>;
			turn lthigh to x-axis <16.197802> speed <44.502174>;
			turn lfoot to x-axis <0.000000> speed <18.582121>;
			turn rfoot to x-axis <12.296703> speed <100.321557>;
			turn torso to x-axis <1.796703> speed <43.845047>;
			sleep 120;
		}
		if( TRUE )
		{
			move rthigh to y-axis [0.100000] speed [1.328859];
			move lleg to y-axis [1.000000] speed [1.993289];
			move torso to y-axis [-0.200000] speed [0.664430];
			turn pelvis to z-axis <-3.500000> speed <11.937825>;
			turn belly to x-axis <-3.197802> speed <67.757208>;
			turn rthigh to x-axis <-10.500000> speed <79.731544>;
			turn lthigh to x-axis <5.296703> speed <72.430121>;
			turn lfoot to x-axis <-0.697802> speed <4.636403>;
			turn rfoot to x-axis <0.296703> speed <79.731544>;
			turn torso to x-axis <-3.895604> speed <37.821369>;
			sleep 130;
		}
		if( TRUE )
		{
			move rthigh to y-axis [0.000000] speed [0.664430];
			move torso to y-axis [-0.300000] speed [0.664430];
			turn pelvis to z-axis <0.000000> speed <23.255034>;
			turn belly to x-axis <-4.197802> speed <6.644295>;
			turn rthigh to x-axis <0.697802> speed <74.401503>;
			turn lthigh to x-axis <-12.296703> speed <116.895785>;
			turn rfoot to x-axis <-11.598901> speed <79.037906>;
			turn torso to x-axis <-0.697802> speed <21.247141>;
			sleep 130;
		}
		move lleg to y-axis [0.900000] speed [0.664430];
		move torso to y-axis [-0.400000] speed [0.664430];
		turn pelvis to z-axis <1.395604> speed <9.272805>;
		turn belly to x-axis <-5.296703> speed <7.301423>;
		turn rthigh to x-axis <3.500000> speed <18.618631>;
		turn lthigh to x-axis <-23.197802> speed <72.430121>;
		turn torso to x-axis <0.697802> speed <9.272805>;
		sleep 130;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	call-script walk();
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	turn pelvis to z-axis <0.000000> speed <150.000000>;
	turn belly to x-axis <0.000000> speed <150.000000>;
	move torso to y-axis [0.000000] speed [1.000000];
	turn torso to x-axis <0.000000> speed <150.000000>;
	turn rthigh to x-axis <0.000000> speed <150.000000>;
	turn rleg to x-axis <0.000000> speed <150.000000>;
	turn rfoot to x-axis <0.000000> speed <150.000000>;
	turn lthigh to x-axis <0.000000> speed <150.000000>;
	turn lleg to x-axis <0.000000> speed <150.000000>;
	turn lfoot to x-axis <0.000000> speed <150.000000>;
}

flames(Func_Var_1)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		Func_Var_1 = 300 + Rand( 50, 1000 );
		sleep Func_Var_1;
		emit-sfx 1 from flare1;
		sleep 150;
		emit-sfx 1 from flare2;
		sleep 100;
		emit-sfx 1 from flare2;
		sleep 150;
		emit-sfx 1 from flare1;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	gun_1 = torso;
	restore_delay = 3000;
	start-script StopMoving();
	start-script flames();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn torso to y-axis <0.000000> speed <90.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn torso to y-axis heading speed <90.000000>;
	turn arms to x-axis <0.000000> speed <45.000000>;
	wait-for-turn torso around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		show flare1;
		sleep 150;
		hide flare1;
	}
	if( gun_1 == 1 )
	{
		show flare2;
		sleep 150;
		hide flare2;
	}
	gun_1 = !gun_1;
}

AimTertiary(heading, pitch)
{
	return (1);
}

FireTertiary()
{
	sleep 150;
}

AimFromTertiary(piecenum)
{
	piecenum = pelvis;
}

QueryTertiary(piecenum)
{
	piecenum = pelvis;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode belly type BITMAPONLY | BITMAP1;
		explode flare1 type BITMAPONLY | BITMAP2;
		explode ground type BITMAPONLY | BITMAP3;
		explode arms type BITMAPONLY | BITMAP4;
		explode head type BITMAPONLY | BITMAP5;
		explode lfoot type BITMAPONLY | BITMAP1;
		explode lleg type BITMAPONLY | BITMAP2;
		explode lthigh type BITMAPONLY | BITMAP3;
		explode pelvis type BITMAPONLY | BITMAP4;
		explode rfoot type BITMAPONLY | BITMAP5;
		explode rleg type BITMAPONLY | BITMAP1;
		explode rthigh type BITMAPONLY | BITMAP2;
		explode torso type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode belly type BITMAPONLY | BITMAP1;
		explode ground type FALL | BITMAP3;
		explode arms type FALL | BITMAP4;
		explode head type FALL | BITMAP5;
		explode lfoot type FALL | BITMAP1;
		explode lleg type FALL | BITMAP2;
		explode lthigh type SHATTER | BITMAP3;
		explode pelvis type FALL | BITMAP4;
		explode rfoot type FALL | BITMAP5;
		explode rleg type FALL | BITMAP1;
		explode rthigh type SHATTER | BITMAP2;
		explode torso type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode belly type BITMAPONLY | BITMAP1;
		explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode arms type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lthigh type SHATTER | BITMAP3;
		explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rthigh type SHATTER | BITMAP2;
		explode torso type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode belly type BITMAPONLY | BITMAP1;
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode arms type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lthigh type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rthigh type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode torso type BITMAPONLY | BITMAP3;
}
