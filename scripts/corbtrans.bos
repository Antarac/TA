#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, lhigear, llogear, rhigear, rlogear, lturretex, lturret,
       lbarrel, lflare, rturretex, rturret, rbarrel, rflare, FLholderA, FLholderB,
       FLturbine, FRholderA, FRholderB, FRturbine, BLholderA, BLholderB, BLturbine, BRholderA,
       BRholderB, BRturbine, link, FLthrust, FRthrust, BLthrust, BRthrust;

static-var  Static_Var_1, unitviewer, Static_Var_3, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

activatescr()
{
	turn llogear to z-axis <0.000000> speed <100.000000>;
	turn rlogear to z-axis <0.000000> speed <100.000000>;
	turn llogear to z-axis <50.005495> speed <100.000000>;
	turn rlogear to z-axis <-50.005495> speed <100.000000>;
}

deactivatescr()
{
	turn llogear to z-axis <0.000000> speed <100.000000>;
	turn rlogear to z-axis <0.000000> speed <100.000000>;
	turn llogear to z-axis <-150.027473> speed <100.000000>;
	turn rlogear to z-axis <150.027473> speed <100.000000>;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	sleep Static_Var_3;
	turn lturret to y-axis <90.016484> speed <300.000000>;
	turn lbarrel to x-axis <0.000000> speed <100.000000>;
	turn rturret to y-axis <-90.016484> speed <300.000000>;
	turn rbarrel to x-axis <0.000000> speed <100.000000>;
	move lturretex to x-axis [3.000000] speed [12.000000];
	move rturretex to x-axis [-3.000000] speed [12.000000];
}

ProcessFlames()
{
	while( TRUE )
	{
		if( Static_Var_1 == 1 )
		{
			emit-sfx 0 from FLthrust;
			emit-sfx 0 from FRthrust;
			emit-sfx 0 from BLthrust;
			emit-sfx 0 from BRthrust;
		}
		if( Static_Var_1 == 2 )
		{
			emit-sfx 0 from FLthrust;
			emit-sfx 0 from FRthrust;
			emit-sfx 0 from BLthrust;
			emit-sfx 0 from BRthrust;
		}
		sleep 40;
	}
}

Create()
{
	Static_Var_1 = 0;
	unitviewer = FALSE;
	Static_Var_3 = 3000;
	hide lflare;
	hide rflare;
	call-script InitState();
	start-script SmokeUnit();
	start-script RestoreAfterDelay();
	start-script ProcessFlames();
}

Demo()
{
	unitviewer = TRUE;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Activate()
{
	Static_Var_1 = 2;
	turn FLholderA to z-axis <-30.005495> speed <25.000000>;
	turn FRholderA to z-axis <30.005495> speed <25.000000>;
	turn BLholderA to z-axis <-30.005495> speed <25.000000>;
	turn BRholderA to z-axis <30.005495> speed <25.000000>;
	turn FLturbine to z-axis <30.005495> speed <25.000000>;
	turn FRturbine to z-axis <-30.005495> speed <25.000000>;
	turn BLturbine to z-axis <30.005495> speed <25.000000>;
	turn BRturbine to z-axis <-30.005495> speed <25.000000>;
	wait-for-turn FLholderA around z-axis;
	turn llogear to z-axis <-150.027473> speed <100.000000>;
	turn rlogear to z-axis <150.027473> speed <100.000000>;
	wait-for-turn rlogear around z-axis;
	turn body to x-axis <5.000000> speed <2.000000>;
	turn FLholderB to z-axis <-2.000000> speed <16.000000>;
	turn FRholderB to z-axis <2.000000> speed <16.000000>;
	turn BLholderB to z-axis <-2.000000> speed <16.000000>;
	turn BRholderB to z-axis <2.000000> speed <16.000000>;
	turn FLholderA to z-axis <-29.005495> speed <8.000000>;
	turn FRholderA to z-axis <29.005495> speed <8.000000>;
	turn BLholderA to z-axis <-29.005495> speed <8.000000>;
	turn BRholderA to z-axis <29.005495> speed <8.000000>;
	turn FLturbine to x-axis <10.000000> speed <20.000000>;
	turn FRturbine to x-axis <10.000000> speed <20.000000>;
	turn BLturbine to x-axis <10.000000> speed <20.000000>;
	turn BRturbine to x-axis <10.000000> speed <20.000000>;
	Static_Var_1 = 1;
}

Deactivate()
{
	Static_Var_1 = 2;
	turn body to x-axis <0.000000> speed <2.000000>;
	turn FLholderB to z-axis <0.000000> speed <16.000000>;
	turn FRholderB to z-axis <0.000000> speed <16.000000>;
	turn BLholderB to z-axis <0.000000> speed <16.000000>;
	turn BRholderB to z-axis <0.000000> speed <16.000000>;
	turn FLholderA to z-axis <-30.005495> speed <8.000000>;
	turn FRholderA to z-axis <30.005495> speed <8.000000>;
	turn BLholderA to z-axis <-30.005495> speed <8.000000>;
	turn BRholderA to z-axis <30.005495> speed <8.000000>;
	turn FLturbine to x-axis <0.000000> speed <20.000000>;
	turn FRturbine to x-axis <0.000000> speed <20.000000>;
	turn BLturbine to x-axis <0.000000> speed <20.000000>;
	turn BRturbine to x-axis <0.000000> speed <20.000000>;
	wait-for-turn FLturbine around x-axis;
	turn llogear to z-axis <0.000000> speed <100.000000>;
	turn rlogear to z-axis <0.000000> speed <100.000000>;
	wait-for-turn rlogear around z-axis;
	turn FLholderA to z-axis <30.005495> speed <25.000000>;
	turn FRholderA to z-axis <-30.005495> speed <25.000000>;
	turn BLholderA to z-axis <30.005495> speed <25.000000>;
	turn BRholderA to z-axis <-30.005495> speed <25.000000>;
	turn FLturbine to z-axis <-30.005495> speed <25.000000>;
	turn FRturbine to z-axis <30.005495> speed <25.000000>;
	turn BLturbine to z-axis <-30.005495> speed <25.000000>;
	turn BRturbine to z-axis <30.005495> speed <25.000000>;
	wait-for-turn BRholderA around z-axis;
	move body to y-axis [-1.000000] speed [4.000000];
	turn lhigear to z-axis <-3.000000> speed <12.000000>;
	turn rhigear to z-axis <3.000000> speed <12.000000>;
	turn llogear to z-axis <-3.000000> speed <12.000000>;
	turn rlogear to z-axis <3.000000> speed <12.000000>;
	wait-for-turn llogear around z-axis;
	turn lhigear to z-axis <0.000000> speed <12.000000>;
	turn rhigear to z-axis <0.000000> speed <12.000000>;
	turn llogear to z-axis <0.000000> speed <12.000000>;
	turn rlogear to z-axis <0.000000> speed <12.000000>;
	move body to y-axis [0.000000] speed [4.000000];
	Static_Var_1 = 0;
}

BeginTransport(Func_Var_1)
{
	move link to y-axis [0.000000] - Func_Var_1 now;
	start-script RequestState(0);
}

QueryTransport(Func_Var_1)
{
	Func_Var_1 = 26;
}

EndTransport()
{
	start-script RequestState(1);
}

QueryPrimary(piecenum)
{
	piecenum = lflare;
}

AimFromPrimary(piecenum)
{
	piecenum = lturret;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	move lturretex to x-axis [0.000000] speed [12.000000];
	move rturretex to x-axis [0.000000] speed [12.000000];
	turn lturret to y-axis heading speed <300.000000>;
	turn lbarrel to x-axis <0.000000> - pitch speed <100.000000>;
	wait-for-turn lturret around y-axis;
	wait-for-turn lbarrel around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show lflare;
	sleep 150;
	hide lflare;
}

QuerySecondary(piecenum)
{
	piecenum = rflare;
}

AimFromSecondary(piecenum)
{
	piecenum = rturret;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	move lturretex to x-axis [0.000000] speed [12.000000];
	move rturretex to x-axis [0.000000] speed [12.000000];
	turn rturret to y-axis heading speed <300.000000>;
	turn rbarrel to x-axis <0.000000> - pitch speed <100.000000>;
	wait-for-turn rturret around y-axis;
	wait-for-turn rbarrel around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	show rflare;
	sleep 150;
	hide rflare;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD | BITMAP1;
		explode lhigear type NOHEATCLOUD | BITMAP1;
		explode llogear type NOHEATCLOUD | BITMAP1;
		explode rhigear type NOHEATCLOUD | BITMAP1;
		explode rlogear type NOHEATCLOUD | BITMAP1;
		explode lturretex type NOHEATCLOUD | BITMAP1;
		explode lturret type NOHEATCLOUD | BITMAP1;
		explode lbarrel type NOHEATCLOUD | BITMAP1;
		explode lflare type NOHEATCLOUD | BITMAP1;
		explode rturretex type NOHEATCLOUD | BITMAP1;
		explode rturret type NOHEATCLOUD | BITMAP1;
		explode rbarrel type NOHEATCLOUD | BITMAP1;
		explode rflare type NOHEATCLOUD | BITMAP1;
		explode FLholderA type NOHEATCLOUD | BITMAP1;
		explode FLholderB type NOHEATCLOUD | BITMAP1;
		explode FLturbine type NOHEATCLOUD | BITMAP1;
		explode FRholderA type NOHEATCLOUD | BITMAP1;
		explode FRholderB type NOHEATCLOUD | BITMAP1;
		explode FRturbine type NOHEATCLOUD | BITMAP1;
		explode BLholderA type NOHEATCLOUD | BITMAP1;
		explode BLholderB type NOHEATCLOUD | BITMAP1;
		explode BLturbine type NOHEATCLOUD | BITMAP1;
		explode BRholderA type NOHEATCLOUD | BITMAP1;
		explode BRholderB type NOHEATCLOUD | BITMAP1;
		explode BRturbine type NOHEATCLOUD | BITMAP1;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD | SHATTER | BITMAP4;
		explode lhigear type NOHEATCLOUD | SHATTER | BITMAP4;
		explode llogear type NOHEATCLOUD | SHATTER | BITMAP4;
		explode rhigear type NOHEATCLOUD | SHATTER | BITMAP4;
		explode rlogear type NOHEATCLOUD | SHATTER | BITMAP4;
		explode lturretex type NOHEATCLOUD | SHATTER | BITMAP4;
		explode lturret type NOHEATCLOUD | SHATTER | BITMAP4;
		explode lbarrel type NOHEATCLOUD | SHATTER | BITMAP4;
		explode lflare type NOHEATCLOUD | SHATTER | BITMAP4;
		explode rturretex type NOHEATCLOUD | SHATTER | BITMAP4;
		explode rturret type NOHEATCLOUD | SHATTER | BITMAP4;
		explode rbarrel type NOHEATCLOUD | SHATTER | BITMAP4;
		explode rflare type NOHEATCLOUD | SHATTER | BITMAP4;
		explode FLholderA type NOHEATCLOUD | SHATTER | BITMAP4;
		explode FLholderB type NOHEATCLOUD | SHATTER | BITMAP4;
		explode FLturbine type NOHEATCLOUD | SHATTER | BITMAP4;
		explode FRholderA type NOHEATCLOUD | SHATTER | BITMAP4;
		explode FRholderB type NOHEATCLOUD | SHATTER | BITMAP4;
		explode FRturbine type NOHEATCLOUD | SHATTER | BITMAP4;
		explode BLholderA type NOHEATCLOUD | SHATTER | BITMAP4;
		explode BLholderB type NOHEATCLOUD | SHATTER | BITMAP4;
		explode BLturbine type NOHEATCLOUD | SHATTER | BITMAP4;
		explode BRholderA type NOHEATCLOUD | SHATTER | BITMAP4;
		explode BRholderB type NOHEATCLOUD | SHATTER | BITMAP4;
		explode BRturbine type NOHEATCLOUD | SHATTER | BITMAP4;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lhigear type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode llogear type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rhigear type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rlogear type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lturretex type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lturret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lbarrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lflare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rturretex type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rturret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rbarrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rflare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode FLholderA type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode FLholderB type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode FLturbine type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode FRholderA type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode FRholderB type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode FRturbine type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode BLholderA type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode BLholderB type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode BLturbine type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode BRholderA type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode BRholderB type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode BRturbine type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lhigear type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode llogear type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rhigear type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rlogear type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lturretex type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lturret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lbarrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lflare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rturretex type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rturret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rbarrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rflare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode FLholderA type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode FLholderB type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode FLturbine type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode FRholderA type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode FRholderB type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode FRturbine type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode BLholderA type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode BLholderB type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode BLturbine type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode BRholderA type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode BRholderB type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode BRturbine type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	return (corpsetype);
}
