#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, lights, rotor, b1, b2, b3, b4;

static-var  statechg_DesiredState, statechg_StateChanging;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Tangue()
{
var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn base to x-axis rockAng speed rockSpeed*5;
			turn base to z-axis rockAng speed rockSpeed*5;
			wait-for-turn base around x-axis;
			wait-for-turn base around z-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}

Go()
{
	dont-cache lights;
	spin rotor around y-axis speed <60.000000>;
	turn b1 to x-axis <-80.000000> speed <50.000000>;
	turn b2 to x-axis <80.000000> speed <50.000000>;
	turn b3 to z-axis <-80.000000> speed <50.000000>;
	turn b4 to z-axis <80.000000> speed <50.000000>;
}

Stop()
{
	spin rotor around y-axis speed <0.000000>;
	turn b1 to x-axis <0.000000> speed <60.000000>;
	turn b2 to x-axis <0.000000> speed <60.000000>;
	turn b3 to z-axis <0.000000> speed <60.000000>;
	turn b4 to z-axis <0.000000> speed <60.000000>;
	cache lights;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade body;
	dont-cache rotor;
	dont-cache b1;
	dont-cache b2;
	dont-cache b3;
	dont-cache b4;
	call-script InitState();
	start-script SmokeUnit();
	start-script Tangue();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode rotor type BITMAPONLY | BITMAP2;
		explode lights type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode rotor type BITMAPONLY | BITMAP2;
		explode lights type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode rotor type BITMAPONLY | BITMAP1;
		explode body type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode lights type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode rotor type BITMAPONLY | BITMAP5;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode lights type BITMAPONLY | BITMAP3;
}
