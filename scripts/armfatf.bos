#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, floater1, floater2, floater3, floater4, arml, lightl, armt,
       lightt, armr, lightr, armb, lightb, dome, centerlight;

static-var  statechg_DesiredState, statechg_StateChanging;


activatescr()
{
	turn armr to z-axis <0.000000> now;
	turn arml to z-axis <0.000000> now;
	turn armt to x-axis <0.000000> now;
	turn armb to x-axis <0.000000> now;
	move armr to x-axis [0.000000] now;
	move arml to x-axis [0.000000] now;
	move armt to z-axis [0.000000] now;
	move armb to z-axis [0.000000] now;
	turn armr to z-axis <-90.021978> speed <55.000000>;
	turn arml to z-axis <90.021978> speed <55.000000>;
	turn armt to x-axis <90.021978> speed <55.000000>;
	turn armb to x-axis <-90.021978> speed <55.000000>;
	move armr to x-axis [-10.000000] speed [6.000000];
	move arml to x-axis [10.000000] speed [6.000000];
	move armt to z-axis [-10.000000] speed [6.000000];
	move armb to z-axis [10.000000] speed [6.000000];
	wait-for-turn armr around z-axis;
	wait-for-turn arml around z-axis;
	wait-for-turn armt around x-axis;
	wait-for-turn armb around x-axis;
	move lightr to x-axis [-3.000000] speed [1.000000];
	move lightl to x-axis [3.000000] speed [1.000000];
	move lightt to z-axis [-3.000000] speed [1.000000];
	move lightb to z-axis [3.000000] speed [1.000000];
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	move lightr to x-axis [0.000000] speed [1.000000];
	move lightl to x-axis [0.000000] speed [1.000000];
	move lightt to z-axis [0.000000] speed [1.000000];
	move lightb to z-axis [0.000000] speed [1.000000];
	wait-for-move lightr along x-axis;
	wait-for-move lightl along x-axis;
	wait-for-move lightt along z-axis;
	wait-for-move lightb along z-axis;
	turn armr to z-axis <0.000000> speed <55.000000>;
	turn arml to z-axis <0.000000> speed <55.000000>;
	turn armt to x-axis <0.000000> speed <55.000000>;
	turn armb to x-axis <0.000000> speed <55.000000>;
	move armr to x-axis [0.000000] speed [6.000000];
	move arml to x-axis [0.000000] speed [6.000000];
	move armt to z-axis [0.000000] speed [6.000000];
	move armb to z-axis [0.000000] speed [6.000000];
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD | BITMAP5;
		explode floater1 type NOHEATCLOUD | BITMAP2;
		explode floater2 type NOHEATCLOUD | BITMAP3;
		explode floater3 type NOHEATCLOUD | BITMAP4;
		explode floater4 type NOHEATCLOUD | BITMAP5;
		explode centerlight type NOHEATCLOUD | BITMAP2;
		explode dome type NOHEATCLOUD | BITMAP2;
		explode lightl type NOHEATCLOUD | BITMAP3;
		explode lightr type NOHEATCLOUD | BITMAP4;
		explode lightt type NOHEATCLOUD | BITMAP5;
		explode lightb type NOHEATCLOUD | BITMAP1;
		explode arml type NOHEATCLOUD | BITMAP2;
		explode armr type NOHEATCLOUD | BITMAP3;
		explode armt type NOHEATCLOUD | BITMAP4;
		explode armb type NOHEATCLOUD | BITMAP5;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD | BITMAP5;
		explode floater1 type NOHEATCLOUD | FALL | BITMAP2;
		explode floater2 type NOHEATCLOUD | FALL | BITMAP3;
		explode floater3 type NOHEATCLOUD | FALL | BITMAP4;
		explode floater4 type NOHEATCLOUD | FALL | BITMAP5;
		explode centerlight type NOHEATCLOUD | FALL | BITMAP2;
		explode dome type NOHEATCLOUD | FALL | BITMAP2;
		explode lightl type NOHEATCLOUD | FALL | BITMAP3;
		explode lightr type NOHEATCLOUD | FALL | BITMAP4;
		explode lightt type NOHEATCLOUD | FALL | BITMAP5;
		explode lightb type NOHEATCLOUD | FALL | BITMAP1;
		explode arml type NOHEATCLOUD | SHATTER | BITMAP2;
		explode armr type NOHEATCLOUD | BITMAP3;
		explode armt type NOHEATCLOUD | BITMAP4;
		explode armb type NOHEATCLOUD | BITMAP5;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD | BITMAP5;
		explode floater1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode floater2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode floater3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode floater4 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode centerlight type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode dome type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode lightl type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode lightr type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode lightt type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode lightb type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode arml type NOHEATCLOUD | SHATTER | BITMAP2;
		explode armr type NOHEATCLOUD | BITMAP3;
		explode armt type NOHEATCLOUD | BITMAP4;
		explode armb type NOHEATCLOUD | BITMAP5;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD | BITMAP5;
	explode floater1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode floater2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode floater3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode floater4 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode centerlight type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode dome type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode lightl type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode lightr type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode lightt type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode lightb type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode arml type NOHEATCLOUD | SHATTER | BITMAP2;
	explode armr type NOHEATCLOUD | BITMAP3;
	explode armt type NOHEATCLOUD | BITMAP4;
	explode armb type NOHEATCLOUD | BITMAP5;
	return (corpsetype);
}
