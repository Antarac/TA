#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare, turret, gunbase, pelvis, lleg, rleg, ground;

static-var  restore_delay;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4


walk()
{
	while( TRUE )
	{
		if( TRUE )
		{
			move pelvis to y-axis [0.000000] now;
			move lleg to y-axis [0.000000] now;
			move lleg to z-axis [1.800000] speed [21.469880];
			move rleg to y-axis [0.000000] now;
			move rleg to z-axis [-1.600000] speed [19.084337];
			turn pelvis to x-axis <6.000000> speed <71.566265>;
			turn lleg to x-axis <-6.000000> speed <71.566265>;
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.500000] now;
			move lleg to y-axis [0.500000] now;
			move rleg to y-axis [0.500000] now;
			turn pelvis to x-axis <4.895604> now;
			turn lleg to x-axis <-4.895604> now;
			turn rleg to x-axis <1.098901> now;
			sleep 30;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.300000] now;
			move lleg to y-axis [0.300000] now;
			move rleg to y-axis [0.300000] now;
			turn pelvis to x-axis <2.098901> now;
			turn lleg to x-axis <-2.098901> now;
			turn rleg to x-axis <2.796703> now;
			sleep 20;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.100000] now;
			move lleg to y-axis [0.100000] now;
			move rleg to y-axis [0.100000] now;
			turn pelvis to x-axis <1.098901> now;
			turn lleg to x-axis <-1.000000> now;
			turn rleg to x-axis <3.197802> now;
			sleep 10;
		}
		if( TRUE )
		{
			move pelvis to y-axis [0.000000] now;
			move lleg to y-axis [0.000000] now;
			move rleg to y-axis [1.100000] speed [13.120482];
			move rleg to z-axis [-1.900000] speed [3.578313];
			turn pelvis to x-axis <0.000000> speed <71.566265>;
			turn lleg to x-axis <0.000000> speed <71.566265>;
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to z-axis [1.000000] speed [9.542169];
			move rleg to z-axis [-0.300000] speed [19.084337];
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to y-axis [0.000000] now;
			move lleg to z-axis [0.000000] speed [11.927711];
			move rleg to z-axis [0.000000] speed [3.578313];
			turn pelvis to x-axis <0.000000> now;
			turn lleg to x-axis <0.000000> now;
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to z-axis [-0.600000] speed [3.986577];
			move rleg to z-axis [0.800000] speed [5.315436];
			turn rleg to x-axis <-9.098901> speed <60.455785>;
			sleep 100;
		}
		if( TRUE )
		{
			move lleg to z-axis [-1.200000] speed [7.156627];
			move rleg to y-axis [0.000000] speed [13.120482];
			turn pelvis to x-axis <6.000000> speed <71.566265>;
			turn rleg to x-axis <-6.000000> speed <36.962795>;
			sleep 60;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.500000] now;
			move lleg to y-axis [0.500000] now;
			move rleg to y-axis [0.500000] now;
			turn pelvis to x-axis <4.598901> now;
			turn lleg to x-axis <0.697802> now;
			turn rleg to x-axis <-4.895604> now;
			sleep 30;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.300000] now;
			move lleg to y-axis [0.300000] now;
			move rleg to y-axis [0.300000] now;
			turn pelvis to x-axis <2.098901> now;
			turn lleg to x-axis <2.796703> now;
			turn rleg to x-axis <-2.098901> now;
			sleep 20;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.100000] now;
			move lleg to y-axis [0.100000] now;
			move rleg to y-axis [0.100000] now;
			turn pelvis to x-axis <1.098901> now;
			turn lleg to x-axis <2.500000> now;
			turn rleg to x-axis <-1.000000> now;
			sleep 10;
		}
		if( TRUE )
		{
			move lleg to y-axis [1.100000] speed [13.120482];
			move lleg to z-axis [-1.600000] speed [4.771084];
			move rleg to y-axis [0.100000] speed [1.192771];
			turn pelvis to x-axis <0.000000> speed <71.566265>;
			turn lleg to x-axis <0.000000> now;
			turn rleg to x-axis <0.000000> speed <71.566265>;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to z-axis [-0.700000] speed [10.734940];
			move rleg to z-axis [0.200000] speed [7.156627];
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to z-axis [0.500000] speed [14.313253];
			move rleg to y-axis [0.000000] speed [1.192771];
			move rleg to z-axis [-0.300000] speed [5.963855];
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		move lleg to z-axis [1.000000] speed [3.322148];
		move rleg to y-axis [0.000000] now;
		move rleg to z-axis [-1.300000] speed [6.644295];
		turn lleg to x-axis <-10.197802> speed <67.757208>;
		turn rleg to x-axis <0.000000> now;
		sleep 100;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	call-script walk();
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

Create()
{
	hide flare;
	restore_delay = 3000;
	start-script StopMoving();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

SweetSpot(piecenum)
{
	piecenum = pelvis;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn gunbase to x-axis <0.000000> speed <45.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <225.098901>;
	turn gunbase to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn gunbase around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show flare;
	sleep 50;
	hide flare;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode flare type BITMAPONLY | BITMAP1;
		explode ground type BITMAPONLY | BITMAP3;
		explode gunbase type BITMAPONLY | BITMAP1;
		explode lleg type BITMAPONLY | BITMAP2;
		explode pelvis type BITMAPONLY | BITMAP3;
		explode rleg type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode ground type FALL | BITMAP3;
		explode gunbase type BITMAPONLY | BITMAP1;
		explode lleg type FALL | BITMAP2;
		explode pelvis type BITMAPONLY | BITMAP3;
		explode rleg type FALL | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode gunbase type BITMAPONLY | BITMAP1;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode pelvis type BITMAPONLY | BITMAP3;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode gunbase type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode pelvis type BITMAPONLY | BITMAP3;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode turret type BITMAPONLY | BITMAP5;
}
