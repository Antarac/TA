#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  RayTurret, raygun, RayMount, RayFocus, LMFront, RMFront, LMBack, RMBack,
       RayFire, Flare, Body, rlleg, rfoot, llleg, lfoot, lupleg,
       rupleg, base, LMF, RMF, LMB, RMB, MGTurret, MGBarrels,
       MGFlare, LArm, RArm;

static-var  bMoving, bAiming, Static_Var_3, gun_3, Firstep;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_AIM_4			16
#define SIG_MOVE			32


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from Body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl()
{
	while( TRUE )
	{
		if( !bAiming )
		{
			Static_Var_3 = 0;
			IF (!Firstep)
			{
				turn rupleg to x-axis <-35> speed <196>;
				turn lupleg to x-axis <28> speed <106.40>;
			}
			IF (Firstep)
			{
				turn rupleg to x-axis <-35> speed <98.0>;
				turn lupleg to x-axis <28> speed <78.40>;
			}
			turn larm to x-axis <-10> speed <30>;
			turn rarm to x-axis <20> speed <40>;
			turn llleg to x-axis <-15> speed <42.0>;
			turn lfoot to x-axis <-18> speed <50.40>;
			sleep 350;
			turn body to x-axis <0> speed <39.20>;
			turn larm to x-axis <0> speed <20>;
			turn rarm to x-axis <0> speed <50>;
			turn rupleg to x-axis <10.00> speed <116.66667>;
			turn rlleg to x-axis <5> speed <23.3333>;
			turn lupleg to x-axis <35> speed <32.66667>;
			turn llleg to x-axis <10> speed <116.66667>;
			turn lfoot to x-axis <5> speed <84>;
			sleep 215;
			turn body to x-axis <-8.5> speed <22>;
			turn body to y-axis <2> speed <3>;
			turn larm to x-axis <20> speed <30>;
			turn rarm to x-axis <-10> speed <40>;
			turn lupleg to x-axis <-35> speed <196>;
			turn rupleg to x-axis <28> speed <106.40>;
			turn rlleg to x-axis <-15> speed <42.0>;
			turn rfoot to x-axis <-18> speed <50.40>;	
			sleep 350;
			turn body to x-axis <0> speed <28>;
			turn larm to x-axis <0> speed <50>;
			turn rarm to x-axis <0> speed <20>;
			turn lupleg to x-axis <10.00> speed <116.66667>;
			turn llleg to x-axis <5> speed <23.3333>;
			turn rupleg to x-axis <35> speed <32.66667>;
			turn rlleg to x-axis <10> speed <116.66667>;
			turn rfoot to x-axis <5> speed <84>;
			IF (Firstep)
				{
				Firstep = 0;
				}
		}
		if( bAiming )
		{
			Static_Var_3 = 1;
			IF (!Firstep)
			{
			turn rupleg to x-axis <-35> speed <196>;
			turn lupleg to x-axis <28> speed <106.40>;
			}
			IF (Firstep)
			{
			turn rupleg to x-axis <-35> speed <98.0>;
			turn lupleg to x-axis <28> speed <78.40>;
			}
			turn larm to x-axis <-10> speed <30>;
			turn rarm to x-axis <20> speed <40>;
			turn llleg to x-axis <-15> speed <42.0>;
			turn lfoot to x-axis <-18> speed <50.40>;
			sleep 350;
			turn larm to x-axis <0> speed <20>;
			turn rarm to x-axis <0> speed <50>;
			turn rupleg to x-axis <10.00> speed <116.66667>;
			turn rlleg to x-axis <5> speed <23.3333>;
			turn lupleg to x-axis <35> speed <32.66667>;
			turn llleg to x-axis <10> speed <116.66667>;
			turn lfoot to x-axis <5> speed <84>;
			sleep 215;
			turn larm to x-axis <20> speed <30>;
			turn rarm to x-axis <-10> speed <40>;
			turn lupleg to x-axis <-35> speed <196>;
			turn rupleg to x-axis <28> speed <106.40>;
			turn rlleg to x-axis <-15> speed <42.0>;
			turn rfoot to x-axis <-18> speed <50.40>;	
			sleep 350;
			turn larm to x-axis <0> speed <50>;
			turn rarm to x-axis <0> speed <20>;
			turn lupleg to x-axis <10.00> speed <116.66667>;
			turn llleg to x-axis <5> speed <23.3333>;
			turn rupleg to x-axis <35> speed <32.66667>;
			turn rlleg to x-axis <10> speed <116.66667>;
			turn rfoot to x-axis <5> speed <84>;
			IF (Firstep)
				{
				Firstep = 0;
				}
		}
		sleep 215;
		if( !bAiming )
		{
			turn body to x-axis <-8.5> speed <30.8>;
			turn body to y-axis <-2> speed <4.20>;
		}
	}
}

Create()
{
	hide flare;
	dont-cache flare;
	spin flare around z-axis speed <300>;
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_3 = 1;
	gun_3 = 0;
	firstep = 1;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 5000;
	set-signal-mask 0;
	bAiming = FALSE;
	cache RayFire;
	move RayFocus to z-axis [0] speed [2.5];
	turn RayMount to y-axis <0.000000> speed <35.000000>;
	turn RayGun to x-axis <0.000000> speed <40.000000>;
	wait-for-turn RayMount around y-axis;
	wait-for-turn RayGun around x-axis;
}

RestoreSecondary()
{
	sleep 4000;
	set-signal-mask 0;
	bAiming = FALSE;
	turn MGTurret to y-axis <0.000000> speed <80.000000>;
	turn MGBarrels to z-axis <0.000000> speed <100.000000>;
	wait-for-turn MGTurret around y-axis;
	if( !bMoving )
	{
		turn RArm to x-axis <0> speed <20>;
		turn LArm to x-axis <0> speed <20>;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script MotionControl();
	bMoving = TRUE;
}

StopMoving()
{
	signal SIG_MOVE;
	bMoving = FALSE;
	Static_Var_3 = 1;
	Firstep = 1;
	turn larm to x-axis <0> speed <20>;
	turn rarm to x-axis <0> speed <20>;
	turn rupleg to x-axis <0.00> speed <140.00>;
	turn rlleg to x-axis <0.00> speed <98.0>;
	turn rfoot to x-axis <0.00> speed <84>;
	turn lupleg to x-axis <0.00> speed <140.00>;
	turn llleg to x-axis <0.00> speed <98.0>;
	turn lfoot to x-axis <0.00> speed <84>;
	if( !bAiming )
	{
		turn body to x-axis <0> speed <8.4>;
		turn body to y-axis <0> speed <1.4>;
	}
}

SweetSpot(piecenum)
{
	piecenum = RayTurret;
}

AimPrimary(heading, pitch)
{
	move RayFocus to z-axis [4] speed [4];
	dont-cache RayFire;
	bAiming = TRUE;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_3 )
	{
		sleep 250;
	}
	turn RayMount to y-axis heading speed <70.000000>;
	turn RayGun to x-axis <0.000000> - pitch speed <75.000000>;
	wait-for-move RayFocus along z-axis;
	wait-for-turn RayMount around y-axis;
	wait-for-turn RayGun around x-axis;
	Start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	dont-cache flare;
	emit-sfx 1024 from flare;
	spin RayFocus around z-axis speed <325>;
	move rayfocus to z-axis [2] NOW;
	move rayfire to z-axis [2] NOW;
	sleep 120;
	move rayfocus to z-axis [4] speed [8];
	move rayfire to z-axis [0] speed [8];	
	sleep 150;
	stop-spin RayFocus around z-axis decelerate <15>;
}

QueryPrimary(piecenum)
{
	piecenum = RayFire;
}

AimFromPrimary(piecenum)
{
	piecenum = Raygun;
}

AimSecondary(heading, pitch)
{
	bAiming=TRUE;
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	while( !Static_Var_3 )
	{
		sleep 250;
	}
	turn RArm to x-axis <-45> speed <90>;
	turn LArm to x-axis <-45> speed <90>;
	while( heading >= <90> AND heading <= <270> )
	{
		sleep 250;
	}
	turn MGTurret to y-axis heading speed <120.000000>;
	wait-for-turn MGTurret around y-axis;
	Start-script RestoreSecondary();
	return (1);
}

FireSecondary()
{
	emit-sfx 1024+2 from MGFlare;
	turn MGBarrels to z-axis <0> NOW;
	spin MGBarrels around z-axis speed <400>;
	sleep 1000;
	stop-spin MGBarrels around z-axis decelerate <15>;
}

AimFromSecondary(piecenum)
{
	piecenum = MGTurret;
}

QuerySecondary(piecenum)
{
	piecenum = MGFlare;
}

AimFromTertiary(piecenum)
{
	piecenum = body;
}

QueryTertiary(piecenum)
{
	if( gun_3 == 0 )
	{
		piecenum = LMF;
	}
	if( gun_3 == 1 )
	{
		piecenum = RMF;
	}
	if( gun_3 == 2 )
	{
		piecenum = LMB;
	}
	if( gun_3 == 3 )
	{
		piecenum = RMB;
	}
}

FireTertiary()
{
	if( gun_3 == 0 )
	{
		gun_3 = 1;
		move LMFront to y-axis [-1] speed [20.000000];
		wait-for-move LMFront along z-axis;
		move LMFront to y-axis [0.000000] speed [1.000000];
		return (0);
	}
	if( gun_3 == 1 )
	{
		gun_3 = 2;
		move RMFront to y-axis [-1] speed [20.000000];
		wait-for-move RMFront along z-axis;
		move RMFront to y-axis [0.000000] speed [1.000000];
		return (0);
	}
	if( gun_3 == 2 )
	{
		gun_3 = 3;
		move LMBack to y-axis [-1] speed [20.000000];
		wait-for-move LMBack along z-axis;
		move LMBack to y-axis [0.000000] speed [1.000000];
		return (0);
	}
	if( gun_3 == 3 )
	{
		gun_3 = 0;
		move RMBack to y-axis [-1] speed [20.000000];
		wait-for-move RMBack along z-axis;
		move RMBack to y-axis [0.000000] speed [1.000000];
		return (0);
	}
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	return (1);
}

AimFromWeapon4(piecenum)
{
	piecenum = Body;
}

AimWeapon4(heading, pitch)
{
	if( get ACTIVATION )
	{
		return (1);
	}
	if( !get ACTIVATION )
	{
		return (0);
	}
}

QueryWeapon4(piecenum)
{
	piecenum = Body;
}

FireWeapon4(Func_Var_1)
{
}


Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode raygun type BITMAPONLY | BITMAP2;
		explode lfoot type BITMAPONLY | BITMAP4;
		explode LMF type BITMAPONLY | BITMAP5;
		explode RMF type BITMAPONLY | BITMAP5;
		explode LMB type FALL | BITMAP5;
		explode RMB type FALL | BITMAP5;
		explode llleg type BITMAPONLY | BITMAP1;
		explode lupleg type BITMAPONLY | BITMAP2;
		explode Body type BITMAPONLY | BITMAP3;
		explode rfoot type BITMAPONLY | BITMAP4;
		explode rlleg type BITMAPONLY | BITMAP1;
		explode rupleg type BITMAPONLY | BITMAP2;
		explode RayTurret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type FALL | BITMAP1;
		explode raygun type SHATTER | BITMAP2;
		explode lfoot type BITMAPONLY | BITMAP4;
		explode LMF type FALL | BITMAP5;
		explode RMF type FALL | BITMAP5;
		explode LMB type FALL | BITMAP5;
		explode RMB type FALL | BITMAP5;
		explode llleg type BITMAPONLY | BITMAP1;
		explode lupleg type BITMAPONLY | BITMAP2;
		explode Body type BITMAPONLY | BITMAP3;
		explode rfoot type BITMAPONLY | BITMAP4;
		explode rlleg type BITMAPONLY | BITMAP1;
		explode rupleg type BITMAPONLY | BITMAP2;
		explode RayTurret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode raygun type SHATTER | BITMAP2;
		explode lfoot type BITMAPONLY | BITMAP4;
		explode LMF type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode RMF type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode LMB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode RMB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode llleg type BITMAPONLY | BITMAP1;
		explode lupleg type BITMAPONLY | BITMAP2;
		explode Body type BITMAPONLY | BITMAP3;
		explode rfoot type BITMAPONLY | BITMAP4;
		explode rlleg type BITMAPONLY | BITMAP1;
		explode rupleg type BITMAPONLY | BITMAP2;
		explode RayTurret type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode raygun type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode lfoot type BITMAPONLY | BITMAP4;
	explode LMF type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode RMF type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode LMB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode RMB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode llleg type BITMAPONLY | BITMAP1;
	explode lupleg type BITMAPONLY | BITMAP2;
	explode Body type BITMAPONLY | BITMAP3;
	explode rfoot type BITMAPONLY | BITMAP4;
	explode rlleg type BITMAPONLY | BITMAP1;
	explode rupleg type BITMAPONLY | BITMAP2;
	explode RayTurret type SHATTER | BITMAP5;
}
