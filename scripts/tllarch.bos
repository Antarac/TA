#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  aim, fire, base, flare, body, gun, barrel, socle;

static-var  restore_delay, gun_1;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	dont-shade body;
	dont-shade barrel;
	dont-cache socle;
	hide flare;
	restore_delay = 2000;
	gun_1 = 1;
	start-script SmokeUnit();
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = aim;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn barrel to x-axis <0.000000> speed <30.005495>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn body to y-axis heading speed <40.005495>;
	turn barrel to x-axis <0.000000> - pitch speed <50.005495>;
	wait-for-turn body around y-axis;
	wait-for-turn barrel around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

Shot1()
{
	emit-sfx 1024 + 0 from flare;
	turn gun to z-axis <60.005495> * gun_1 speed <700.038462>;
	++gun_1;
	if( gun_1 == 7 )
	{
		gun_1 = 1;
	}
}

FirePrimary()
{
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP3;
		explode fire type BITMAPONLY | BITMAP4;
		explode fire type BITMAPONLY | BITMAP5;
		explode body type BITMAPONLY | BITMAP1;
		explode gun type BITMAPONLY | BITMAP2;
		explode aim type SMOKE;
		explode fire type FALL | BITMAP5;
		return (corpsetype);
	}
	if( severity <= 40 )
	{
		corpsetype = 2;
		explode aim type SMOKE;
		explode fire type SMOKE;
		explode base type BITMAPONLY | BITMAP3;
		explode fire type SMOKE;
		explode barrel type SHATTER | BITMAP1;
		explode gun type BITMAPONLY | BITMAP2;
		return (corpsetype);
	}
	if( severity <= 80 )
	{
		corpsetype = 3;
		explode aim type SMOKE;
		explode fire type SMOKE;
		explode aim type SMOKE;
		explode fire type SMOKE;
		explode base type BITMAP3;
		explode fire type SMOKE;
		explode body type BITMAP1;
		explode barrel type BITMAP1;
		explode gun type BITMAP2;
		return (corpsetype);
	}
	corpsetype = 3;
	explode aim type SMOKE;
	explode fire type SMOKE;
	explode aim type SMOKE;
	explode fire type SMOKE;
	explode aim type SMOKE;
	explode fire type SMOKE;
	explode aim type SMOKE;
	explode fire type SMOKE;
	explode base type BITMAP3;
	explode fire type SMOKE;
	explode barrel type BITMAP1;
	explode body type BITMAP1;
	explode gun type BITMAP2;
	explode gun type SMOKE;
	return (corpsetype);
}
